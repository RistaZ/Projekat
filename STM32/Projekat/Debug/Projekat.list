
Projekat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a70  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08003b7c  08003b7c  00013b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c18  08003c18  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003c18  08003c18  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c18  08003c18  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c18  08003c18  00013c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c1c  08003c1c  00013c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003c20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000074  08003c94  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08003c94  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009adf  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a27  00000000  00000000  00029b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002b5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d0  00000000  00000000  0002c050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b1d  00000000  00000000  0002ca20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b4e8  00000000  00000000  0004453d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ac65  00000000  00000000  0004fa25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000da68a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003068  00000000  00000000  000da6dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b64 	.word	0x08003b64

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08003b64 	.word	0x08003b64

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2iz>:
 8000608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30f      	bcc.n	8000632 <__aeabi_f2iz+0x2a>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d90d      	bls.n	8000638 <__aeabi_f2iz+0x30>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	bf18      	it	ne
 800062e:	4240      	negne	r0, r0
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr
 8000638:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800063c:	d101      	bne.n	8000642 <__aeabi_f2iz+0x3a>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	d105      	bne.n	800064e <__aeabi_f2iz+0x46>
 8000642:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000646:	bf08      	it	eq
 8000648:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <LCD>:
  * @retval int
  */


void LCD(uint8_t val_1, uint8_t cmd)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	460a      	mov	r2, r1
 800065e:	71fb      	strb	r3, [r7, #7]
 8000660:	4613      	mov	r3, r2
 8000662:	71bb      	strb	r3, [r7, #6]

	uint8_t data;

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, cmd);
 8000664:	79bb      	ldrb	r3, [r7, #6]
 8000666:	461a      	mov	r2, r3
 8000668:	f44f 7180 	mov.w	r1, #256	; 0x100
 800066c:	4838      	ldr	r0, [pc, #224]	; (8000750 <LCD+0xfc>)
 800066e:	f001 fc3d 	bl	8001eec <HAL_GPIO_WritePin>

	data = val_1 & 0x01;
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	f003 0301 	and.w	r3, r3, #1
 8000678:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, data);
 800067a:	7bfb      	ldrb	r3, [r7, #15]
 800067c:	461a      	mov	r2, r3
 800067e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000682:	4833      	ldr	r0, [pc, #204]	; (8000750 <LCD+0xfc>)
 8000684:	f001 fc32 	bl	8001eec <HAL_GPIO_WritePin>

	data = (val_1 >> 1) & 0x01;
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	085b      	lsrs	r3, r3, #1
 800068c:	b2db      	uxtb	r3, r3
 800068e:	f003 0301 	and.w	r3, r3, #1
 8000692:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, data);
 8000694:	7bfb      	ldrb	r3, [r7, #15]
 8000696:	461a      	mov	r2, r3
 8000698:	2102      	movs	r1, #2
 800069a:	482d      	ldr	r0, [pc, #180]	; (8000750 <LCD+0xfc>)
 800069c:	f001 fc26 	bl	8001eec <HAL_GPIO_WritePin>

	data = (val_1 >> 2) & 0x01;
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	089b      	lsrs	r3, r3, #2
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, data);
 80006ac:	7bfb      	ldrb	r3, [r7, #15]
 80006ae:	461a      	mov	r2, r3
 80006b0:	2104      	movs	r1, #4
 80006b2:	4827      	ldr	r0, [pc, #156]	; (8000750 <LCD+0xfc>)
 80006b4:	f001 fc1a 	bl	8001eec <HAL_GPIO_WritePin>

	data = (val_1 >> 3) & 0x01;
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	08db      	lsrs	r3, r3, #3
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	f003 0301 	and.w	r3, r3, #1
 80006c2:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, data);
 80006c4:	7bfb      	ldrb	r3, [r7, #15]
 80006c6:	461a      	mov	r2, r3
 80006c8:	2108      	movs	r1, #8
 80006ca:	4821      	ldr	r0, [pc, #132]	; (8000750 <LCD+0xfc>)
 80006cc:	f001 fc0e 	bl	8001eec <HAL_GPIO_WritePin>

	data = (val_1 >> 4) & 0x01;
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	091b      	lsrs	r3, r3, #4
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, data);
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	461a      	mov	r2, r3
 80006e0:	2110      	movs	r1, #16
 80006e2:	481b      	ldr	r0, [pc, #108]	; (8000750 <LCD+0xfc>)
 80006e4:	f001 fc02 	bl	8001eec <HAL_GPIO_WritePin>

	data = (val_1 >> 5) & 0x01;
 80006e8:	79fb      	ldrb	r3, [r7, #7]
 80006ea:	095b      	lsrs	r3, r3, #5
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, data);
 80006f4:	7bfb      	ldrb	r3, [r7, #15]
 80006f6:	461a      	mov	r2, r3
 80006f8:	2120      	movs	r1, #32
 80006fa:	4815      	ldr	r0, [pc, #84]	; (8000750 <LCD+0xfc>)
 80006fc:	f001 fbf6 	bl	8001eec <HAL_GPIO_WritePin>

	data = (val_1 >> 6) & 0x01;
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	099b      	lsrs	r3, r3, #6
 8000704:	b2db      	uxtb	r3, r3
 8000706:	f003 0301 	and.w	r3, r3, #1
 800070a:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, data);
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	461a      	mov	r2, r3
 8000710:	2140      	movs	r1, #64	; 0x40
 8000712:	480f      	ldr	r0, [pc, #60]	; (8000750 <LCD+0xfc>)
 8000714:	f001 fbea 	bl	8001eec <HAL_GPIO_WritePin>

	data = (val_1 >> 7) & 0x01;
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	09db      	lsrs	r3, r3, #7
 800071c:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, data);
 800071e:	7bfb      	ldrb	r3, [r7, #15]
 8000720:	461a      	mov	r2, r3
 8000722:	2180      	movs	r1, #128	; 0x80
 8000724:	480a      	ldr	r0, [pc, #40]	; (8000750 <LCD+0xfc>)
 8000726:	f001 fbe1 	bl	8001eec <HAL_GPIO_WritePin>


	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_SET);
 800072a:	2201      	movs	r2, #1
 800072c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000730:	4807      	ldr	r0, [pc, #28]	; (8000750 <LCD+0xfc>)
 8000732:	f001 fbdb 	bl	8001eec <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000736:	2032      	movs	r0, #50	; 0x32
 8000738:	f000 fcd2 	bl	80010e0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_9,GPIO_PIN_RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000742:	4803      	ldr	r0, [pc, #12]	; (8000750 <LCD+0xfc>)
 8000744:	f001 fbd2 	bl	8001eec <HAL_GPIO_WritePin>
}
 8000748:	bf00      	nop
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40010800 	.word	0x40010800

08000754 <LCD_init>:

void LCD_init()
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	LCD(0x38,0);
 8000758:	2100      	movs	r1, #0
 800075a:	2038      	movs	r0, #56	; 0x38
 800075c:	f7ff ff7a 	bl	8000654 <LCD>
	LCD(0x0C,0);
 8000760:	2100      	movs	r1, #0
 8000762:	200c      	movs	r0, #12
 8000764:	f7ff ff76 	bl	8000654 <LCD>
	LCD(0x06,0);
 8000768:	2100      	movs	r1, #0
 800076a:	2006      	movs	r0, #6
 800076c:	f7ff ff72 	bl	8000654 <LCD>
	LCD(0x01,0);
 8000770:	2100      	movs	r1, #0
 8000772:	2001      	movs	r0, #1
 8000774:	f7ff ff6e 	bl	8000654 <LCD>
	LCD(0x80,0);
 8000778:	2100      	movs	r1, #0
 800077a:	2080      	movs	r0, #128	; 0x80
 800077c:	f7ff ff6a 	bl	8000654 <LCD>
}
 8000780:	bf00      	nop
 8000782:	bd80      	pop	{r7, pc}

08000784 <HAL_GPIO_EXTI_Callback>:

int prekidac = 0;
int flag = 1;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	80fb      	strh	r3, [r7, #6]
	if(prekidac == 0) // pali se radiator
 800078e:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <HAL_GPIO_EXTI_Callback+0x64>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d112      	bne.n	80007bc <HAL_GPIO_EXTI_Callback+0x38>
	{
		prekidac = 1;
 8000796:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <HAL_GPIO_EXTI_Callback+0x64>)
 8000798:	2201      	movs	r2, #1
 800079a:	601a      	str	r2, [r3, #0]
		flag = 0;
 800079c:	4b13      	ldr	r3, [pc, #76]	; (80007ec <HAL_GPIO_EXTI_Callback+0x68>)
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
		//counter= 0;
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007a8:	4811      	ldr	r0, [pc, #68]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x6c>)
 80007aa:	f001 fb9f 	bl	8001eec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 80007ae:	2201      	movs	r2, #1
 80007b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007b4:	480e      	ldr	r0, [pc, #56]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x6c>)
 80007b6:	f001 fb99 	bl	8001eec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
		prekidac = 0;
		flag = 1;
	}
}
 80007ba:	e011      	b.n	80007e0 <HAL_GPIO_EXTI_Callback+0x5c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007c2:	480b      	ldr	r0, [pc, #44]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x6c>)
 80007c4:	f001 fb92 	bl	8001eec <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 80007c8:	2200      	movs	r2, #0
 80007ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ce:	4808      	ldr	r0, [pc, #32]	; (80007f0 <HAL_GPIO_EXTI_Callback+0x6c>)
 80007d0:	f001 fb8c 	bl	8001eec <HAL_GPIO_WritePin>
		prekidac = 0;
 80007d4:	4b04      	ldr	r3, [pc, #16]	; (80007e8 <HAL_GPIO_EXTI_Callback+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
		flag = 1;
 80007da:	4b04      	ldr	r3, [pc, #16]	; (80007ec <HAL_GPIO_EXTI_Callback+0x68>)
 80007dc:	2201      	movs	r2, #1
 80007de:	601a      	str	r2, [r3, #0]
}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000108 	.word	0x20000108
 80007ec:	20000000 	.word	0x20000000
 80007f0:	40010c00 	.word	0x40010c00

080007f4 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	// Provaravamo da li je trenutni dan selektovan na nasem potenciometru TIMER
	// potenciometar vraca vrednost od 0 do 7 i u zavisnosti od vracenog broja
	// taj dan se smatra selektovanim
}
 80007fc:	bf00      	nop
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	bc80      	pop	{r7}
 8000804:	4770      	bx	lr
	...

08000808 <main>:

int main(void)
{
 8000808:	b590      	push	{r4, r7, lr}
 800080a:	b097      	sub	sp, #92	; 0x5c
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080e:	f000 fc05 	bl	800101c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000812:	f000 f943 	bl	8000a9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000816:	f000 fa43 	bl	8000ca0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800081a:	f000 f99b 	bl	8000b54 <MX_ADC1_Init>
  MX_TIM2_Init();
 800081e:	f000 f9f1 	bl	8000c04 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  	HAL_TIM_Base_Start_IT(&htim2);
 8000822:	4893      	ldr	r0, [pc, #588]	; (8000a70 <main+0x268>)
 8000824:	f002 f95e 	bl	8002ae4 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000828:	2200      	movs	r2, #0
 800082a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800082e:	4891      	ldr	r0, [pc, #580]	; (8000a74 <main+0x26c>)
 8000830:	f001 fb5c 	bl	8001eec <HAL_GPIO_WritePin>
	float rez;
	int zadataTemperatura;
	int trenutnaTemperatura;
	int counter;
	char temp[] = "Zadata Temp: ";
 8000834:	4b90      	ldr	r3, [pc, #576]	; (8000a78 <main+0x270>)
 8000836:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800083a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800083c:	c407      	stmia	r4!, {r0, r1, r2}
 800083e:	8023      	strh	r3, [r4, #0]
	char trenutna[] = "Trenutna Temp:";
 8000840:	4b8e      	ldr	r3, [pc, #568]	; (8000a7c <main+0x274>)
 8000842:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000846:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000848:	c407      	stmia	r4!, {r0, r1, r2}
 800084a:	8023      	strh	r3, [r4, #0]
 800084c:	3402      	adds	r4, #2
 800084e:	0c1b      	lsrs	r3, r3, #16
 8000850:	7023      	strb	r3, [r4, #0]
	char gasi[] = "Gasim se...";
 8000852:	4a8b      	ldr	r2, [pc, #556]	; (8000a80 <main+0x278>)
 8000854:	f107 0318 	add.w	r3, r7, #24
 8000858:	ca07      	ldmia	r2, {r0, r1, r2}
 800085a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char buffer[20];
	LCD_init();
 800085e:	f7ff ff79 	bl	8000754 <LCD_init>


    while(1)
    {
  	  if(flag == 1)
 8000862:	4b88      	ldr	r3, [pc, #544]	; (8000a84 <main+0x27c>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d108      	bne.n	800087c <main+0x74>
  	  {
  		  LCD(0x01,0); // cistimo ekran
 800086a:	2100      	movs	r1, #0
 800086c:	2001      	movs	r0, #1
 800086e:	f7ff fef1 	bl	8000654 <LCD>
  		  while(flag);
 8000872:	bf00      	nop
 8000874:	4b83      	ldr	r3, [pc, #524]	; (8000a84 <main+0x27c>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d1fb      	bne.n	8000874 <main+0x6c>
  	  }

	  HAL_Delay(100);
 800087c:	2064      	movs	r0, #100	; 0x64
 800087e:	f000 fc2f 	bl	80010e0 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000882:	4881      	ldr	r0, [pc, #516]	; (8000a88 <main+0x280>)
 8000884:	f000 fd28 	bl	80012d8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000888:	f04f 31ff 	mov.w	r1, #4294967295
 800088c:	487e      	ldr	r0, [pc, #504]	; (8000a88 <main+0x280>)
 800088e:	f000 fdfd 	bl	800148c <HAL_ADC_PollForConversion>
	  rez = HAL_ADC_GetValue(&hadc1);
 8000892:	487d      	ldr	r0, [pc, #500]	; (8000a88 <main+0x280>)
 8000894:	f000 ff00 	bl	8001698 <HAL_ADC_GetValue>
 8000898:	4603      	mov	r3, r0
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fd0c 	bl	80002b8 <__aeabi_ui2f>
 80008a0:	4603      	mov	r3, r0
 80008a2:	64fb      	str	r3, [r7, #76]	; 0x4c

	  zadataTemperatura = (rez*18)/4095 + 16;
 80008a4:	4979      	ldr	r1, [pc, #484]	; (8000a8c <main+0x284>)
 80008a6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80008a8:	f7ff fd5e 	bl	8000368 <__aeabi_fmul>
 80008ac:	4603      	mov	r3, r0
 80008ae:	4978      	ldr	r1, [pc, #480]	; (8000a90 <main+0x288>)
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff fe0d 	bl	80004d0 <__aeabi_fdiv>
 80008b6:	4603      	mov	r3, r0
 80008b8:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff fc4b 	bl	8000158 <__addsf3>
 80008c2:	4603      	mov	r3, r0
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff fe9f 	bl	8000608 <__aeabi_f2iz>
 80008ca:	4603      	mov	r3, r0
 80008cc:	64bb      	str	r3, [r7, #72]	; 0x48
	  HAL_Delay(1000);
 80008ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008d2:	f000 fc05 	bl	80010e0 <HAL_Delay>
	  HAL_ADC_Stop(&hadc1);
 80008d6:	486c      	ldr	r0, [pc, #432]	; (8000a88 <main+0x280>)
 80008d8:	f000 fdac 	bl	8001434 <HAL_ADC_Stop>

	  LCD(0x01,0); // cistimo ekran
 80008dc:	2100      	movs	r1, #0
 80008de:	2001      	movs	r0, #1
 80008e0:	f7ff feb8 	bl	8000654 <LCD>

	  int i = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	653b      	str	r3, [r7, #80]	; 0x50
	  sprintf(buffer,"%d",zadataTemperatura);
 80008e8:	1d3b      	adds	r3, r7, #4
 80008ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80008ec:	4969      	ldr	r1, [pc, #420]	; (8000a94 <main+0x28c>)
 80008ee:	4618      	mov	r0, r3
 80008f0:	f002 fcbe 	bl	8003270 <siprintf>
	  while(temp[i])
 80008f4:	e00b      	b.n	800090e <main+0x106>
	  {
		  LCD(temp[i],1);
 80008f6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80008fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80008fc:	4413      	add	r3, r2
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2101      	movs	r1, #1
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff fea6 	bl	8000654 <LCD>
		  i++;
 8000908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800090a:	3301      	adds	r3, #1
 800090c:	653b      	str	r3, [r7, #80]	; 0x50
	  while(temp[i])
 800090e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000914:	4413      	add	r3, r2
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d1ec      	bne.n	80008f6 <main+0xee>
	  }
	  i=0;
 800091c:	2300      	movs	r3, #0
 800091e:	653b      	str	r3, [r7, #80]	; 0x50
	  while(buffer[i])
 8000920:	e00d      	b.n	800093e <main+0x136>
	  {
		  LCD(buffer[i],1);
 8000922:	1d3a      	adds	r2, r7, #4
 8000924:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000926:	4413      	add	r3, r2
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	2101      	movs	r1, #1
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff fe91 	bl	8000654 <LCD>
		  HAL_Delay(10);
 8000932:	200a      	movs	r0, #10
 8000934:	f000 fbd4 	bl	80010e0 <HAL_Delay>
		  i++;
 8000938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800093a:	3301      	adds	r3, #1
 800093c:	653b      	str	r3, [r7, #80]	; 0x50
	  while(buffer[i])
 800093e:	1d3a      	adds	r2, r7, #4
 8000940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000942:	4413      	add	r3, r2
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d1eb      	bne.n	8000922 <main+0x11a>
	  }
	  HAL_Delay(500);
 800094a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800094e:	f000 fbc7 	bl	80010e0 <HAL_Delay>
	  //citamo temperaturu sa senzora
	  trenutnaTemperatura = 23; // recimo da smo procitali 23
 8000952:	2317      	movs	r3, #23
 8000954:	647b      	str	r3, [r7, #68]	; 0x44
	  LCD(0x01,0); // cistimo ekran
 8000956:	2100      	movs	r1, #0
 8000958:	2001      	movs	r0, #1
 800095a:	f7ff fe7b 	bl	8000654 <LCD>
	  i=0;
 800095e:	2300      	movs	r3, #0
 8000960:	653b      	str	r3, [r7, #80]	; 0x50
	  while(trenutna[i])
 8000962:	e00b      	b.n	800097c <main+0x174>
	  {
		  LCD(trenutna[i],1);
 8000964:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000968:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800096a:	4413      	add	r3, r2
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	2101      	movs	r1, #1
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fe6f 	bl	8000654 <LCD>
		  i++;
 8000976:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000978:	3301      	adds	r3, #1
 800097a:	653b      	str	r3, [r7, #80]	; 0x50
	  while(trenutna[i])
 800097c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000982:	4413      	add	r3, r2
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d1ec      	bne.n	8000964 <main+0x15c>
	  }
	  sprintf(buffer,"%d",trenutnaTemperatura);
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800098e:	4941      	ldr	r1, [pc, #260]	; (8000a94 <main+0x28c>)
 8000990:	4618      	mov	r0, r3
 8000992:	f002 fc6d 	bl	8003270 <siprintf>
	  i=0;
 8000996:	2300      	movs	r3, #0
 8000998:	653b      	str	r3, [r7, #80]	; 0x50
  while(buffer[i])
 800099a:	e00d      	b.n	80009b8 <main+0x1b0>
  {
	  LCD(buffer[i],1);
 800099c:	1d3a      	adds	r2, r7, #4
 800099e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009a0:	4413      	add	r3, r2
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2101      	movs	r1, #1
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fe54 	bl	8000654 <LCD>
	  HAL_Delay(10);
 80009ac:	200a      	movs	r0, #10
 80009ae:	f000 fb97 	bl	80010e0 <HAL_Delay>
	  i++;
 80009b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009b4:	3301      	adds	r3, #1
 80009b6:	653b      	str	r3, [r7, #80]	; 0x50
  while(buffer[i])
 80009b8:	1d3a      	adds	r2, r7, #4
 80009ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009bc:	4413      	add	r3, r2
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d1eb      	bne.n	800099c <main+0x194>
  }

	  HAL_Delay(1000);
 80009c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009c8:	f000 fb8a 	bl	80010e0 <HAL_Delay>

	  //pitamo da li je veca temp od zadate
	  if(trenutnaTemperatura >= zadataTemperatura)
 80009cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80009ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80009d0:	429a      	cmp	r2, r3
 80009d2:	f6ff af46 	blt.w	8000862 <main+0x5a>
	  {
		  LCD(0x01,0); // cistimo ekran
 80009d6:	2100      	movs	r1, #0
 80009d8:	2001      	movs	r0, #1
 80009da:	f7ff fe3b 	bl	8000654 <LCD>
		  flag = 1;
 80009de:	4b29      	ldr	r3, [pc, #164]	; (8000a84 <main+0x27c>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	601a      	str	r2, [r3, #0]
		  i = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	653b      	str	r3, [r7, #80]	; 0x50
		  while(gasi[i])
 80009e8:	e00b      	b.n	8000a02 <main+0x1fa>
	  {
		  LCD(gasi[i],1);
 80009ea:	f107 0218 	add.w	r2, r7, #24
 80009ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009f0:	4413      	add	r3, r2
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2101      	movs	r1, #1
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fe2c 	bl	8000654 <LCD>
		  i++;
 80009fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80009fe:	3301      	adds	r3, #1
 8000a00:	653b      	str	r3, [r7, #80]	; 0x50
		  while(gasi[i])
 8000a02:	f107 0218 	add.w	r2, r7, #24
 8000a06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000a08:	4413      	add	r3, r2
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d1ec      	bne.n	80009ea <main+0x1e2>
	  }
		  HAL_Delay(400);
 8000a10:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000a14:	f000 fb64 	bl	80010e0 <HAL_Delay>
		  counter = 9;
 8000a18:	2309      	movs	r3, #9
 8000a1a:	657b      	str	r3, [r7, #84]	; 0x54
	  while(counter > 0)
 8000a1c:	e014      	b.n	8000a48 <main+0x240>
	  {
		sprintf(buffer,"%d",counter);
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000a22:	491c      	ldr	r1, [pc, #112]	; (8000a94 <main+0x28c>)
 8000a24:	4618      	mov	r0, r3
 8000a26:	f002 fc23 	bl	8003270 <siprintf>
		HAL_Delay(200);
 8000a2a:	20c8      	movs	r0, #200	; 0xc8
 8000a2c:	f000 fb58 	bl	80010e0 <HAL_Delay>
		LCD(0x01,0);
 8000a30:	2100      	movs	r1, #0
 8000a32:	2001      	movs	r0, #1
 8000a34:	f7ff fe0e 	bl	8000654 <LCD>
		LCD(buffer[0],1);
 8000a38:	793b      	ldrb	r3, [r7, #4]
 8000a3a:	2101      	movs	r1, #1
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff fe09 	bl	8000654 <LCD>
		counter--;
 8000a42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a44:	3b01      	subs	r3, #1
 8000a46:	657b      	str	r3, [r7, #84]	; 0x54
	  while(counter > 0)
 8000a48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	dce7      	bgt.n	8000a1e <main+0x216>
	  }
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8000a4e:	2201      	movs	r2, #1
 8000a50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a54:	4807      	ldr	r0, [pc, #28]	; (8000a74 <main+0x26c>)
 8000a56:	f001 fa49 	bl	8001eec <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a60:	4804      	ldr	r0, [pc, #16]	; (8000a74 <main+0x26c>)
 8000a62:	f001 fa43 	bl	8001eec <HAL_GPIO_WritePin>
	  prekidac = 0;
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <main+0x290>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
    {
 8000a6c:	e6f9      	b.n	8000862 <main+0x5a>
 8000a6e:	bf00      	nop
 8000a70:	200000c0 	.word	0x200000c0
 8000a74:	40010c00 	.word	0x40010c00
 8000a78:	08003b80 	.word	0x08003b80
 8000a7c:	08003b90 	.word	0x08003b90
 8000a80:	08003ba0 	.word	0x08003ba0
 8000a84:	20000000 	.word	0x20000000
 8000a88:	20000090 	.word	0x20000090
 8000a8c:	41900000 	.word	0x41900000
 8000a90:	457ff000 	.word	0x457ff000
 8000a94:	08003b7c 	.word	0x08003b7c
 8000a98:	20000108 	.word	0x20000108

08000a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b094      	sub	sp, #80	; 0x50
 8000aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aa6:	2228      	movs	r2, #40	; 0x28
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f002 fbd8 	bl	8003260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000acc:	2301      	movs	r3, #1
 8000ace:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ad0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ada:	2301      	movs	r3, #1
 8000adc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ae2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ae6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ae8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000aec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000af2:	4618      	mov	r0, r3
 8000af4:	f001 fa2a 	bl	8001f4c <HAL_RCC_OscConfig>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000afe:	f000 f953 	bl	8000da8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b02:	230f      	movs	r3, #15
 8000b04:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b06:	2302      	movs	r3, #2
 8000b08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b12:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	2102      	movs	r1, #2
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f001 fc96 	bl	8002450 <HAL_RCC_ClockConfig>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000b2a:	f000 f93d 	bl	8000da8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000b32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b36:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f001 fe0c 	bl	8002758 <HAL_RCCEx_PeriphCLKConfig>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b46:	f000 f92f 	bl	8000da8 <Error_Handler>
  }
}
 8000b4a:	bf00      	nop
 8000b4c:	3750      	adds	r7, #80	; 0x50
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b64:	4b25      	ldr	r3, [pc, #148]	; (8000bfc <MX_ADC1_Init+0xa8>)
 8000b66:	4a26      	ldr	r2, [pc, #152]	; (8000c00 <MX_ADC1_Init+0xac>)
 8000b68:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b6a:	4b24      	ldr	r3, [pc, #144]	; (8000bfc <MX_ADC1_Init+0xa8>)
 8000b6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b70:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b72:	4b22      	ldr	r3, [pc, #136]	; (8000bfc <MX_ADC1_Init+0xa8>)
 8000b74:	2201      	movs	r2, #1
 8000b76:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b78:	4b20      	ldr	r3, [pc, #128]	; (8000bfc <MX_ADC1_Init+0xa8>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b7e:	4b1f      	ldr	r3, [pc, #124]	; (8000bfc <MX_ADC1_Init+0xa8>)
 8000b80:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b84:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b86:	4b1d      	ldr	r3, [pc, #116]	; (8000bfc <MX_ADC1_Init+0xa8>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8000b8c:	4b1b      	ldr	r3, [pc, #108]	; (8000bfc <MX_ADC1_Init+0xa8>)
 8000b8e:	2203      	movs	r2, #3
 8000b90:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b92:	481a      	ldr	r0, [pc, #104]	; (8000bfc <MX_ADC1_Init+0xa8>)
 8000b94:	f000 fac8 	bl	8001128 <HAL_ADC_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000b9e:	f000 f903 	bl	8000da8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000baa:	2300      	movs	r3, #0
 8000bac:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bae:	1d3b      	adds	r3, r7, #4
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4812      	ldr	r0, [pc, #72]	; (8000bfc <MX_ADC1_Init+0xa8>)
 8000bb4:	f000 fd7c 	bl	80016b0 <HAL_ADC_ConfigChannel>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000bbe:	f000 f8f3 	bl	8000da8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	4619      	mov	r1, r3
 8000bca:	480c      	ldr	r0, [pc, #48]	; (8000bfc <MX_ADC1_Init+0xa8>)
 8000bcc:	f000 fd70 	bl	80016b0 <HAL_ADC_ConfigChannel>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000bd6:	f000 f8e7 	bl	8000da8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bde:	1d3b      	adds	r3, r7, #4
 8000be0:	4619      	mov	r1, r3
 8000be2:	4806      	ldr	r0, [pc, #24]	; (8000bfc <MX_ADC1_Init+0xa8>)
 8000be4:	f000 fd64 	bl	80016b0 <HAL_ADC_ConfigChannel>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000bee:	f000 f8db 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bf2:	bf00      	nop
 8000bf4:	3710      	adds	r7, #16
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000090 	.word	0x20000090
 8000c00:	40012400 	.word	0x40012400

08000c04 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c0a:	f107 0308 	add.w	r3, r7, #8
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c18:	463b      	mov	r3, r7
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c20:	4b1e      	ldr	r3, [pc, #120]	; (8000c9c <MX_TIM2_Init+0x98>)
 8000c22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c26:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39999;
 8000c28:	4b1c      	ldr	r3, [pc, #112]	; (8000c9c <MX_TIM2_Init+0x98>)
 8000c2a:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8000c2e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8000c30:	4b1a      	ldr	r3, [pc, #104]	; (8000c9c <MX_TIM2_Init+0x98>)
 8000c32:	2210      	movs	r2, #16
 8000c34:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 8000c36:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <MX_TIM2_Init+0x98>)
 8000c38:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000c3c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000c3e:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <MX_TIM2_Init+0x98>)
 8000c40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c44:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <MX_TIM2_Init+0x98>)
 8000c48:	2280      	movs	r2, #128	; 0x80
 8000c4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c4c:	4813      	ldr	r0, [pc, #76]	; (8000c9c <MX_TIM2_Init+0x98>)
 8000c4e:	f001 fef9 	bl	8002a44 <HAL_TIM_Base_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000c58:	f000 f8a6 	bl	8000da8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c62:	f107 0308 	add.w	r3, r7, #8
 8000c66:	4619      	mov	r1, r3
 8000c68:	480c      	ldr	r0, [pc, #48]	; (8000c9c <MX_TIM2_Init+0x98>)
 8000c6a:	f002 f88f 	bl	8002d8c <HAL_TIM_ConfigClockSource>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000c74:	f000 f898 	bl	8000da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c80:	463b      	mov	r3, r7
 8000c82:	4619      	mov	r1, r3
 8000c84:	4805      	ldr	r0, [pc, #20]	; (8000c9c <MX_TIM2_Init+0x98>)
 8000c86:	f002 fa57 	bl	8003138 <HAL_TIMEx_MasterConfigSynchronization>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000c90:	f000 f88a 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c94:	bf00      	nop
 8000c96:	3718      	adds	r7, #24
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	200000c0 	.word	0x200000c0

08000ca0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b088      	sub	sp, #32
 8000ca4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca6:	f107 0310 	add.w	r3, r7, #16
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb4:	4b38      	ldr	r3, [pc, #224]	; (8000d98 <MX_GPIO_Init+0xf8>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	4a37      	ldr	r2, [pc, #220]	; (8000d98 <MX_GPIO_Init+0xf8>)
 8000cba:	f043 0310 	orr.w	r3, r3, #16
 8000cbe:	6193      	str	r3, [r2, #24]
 8000cc0:	4b35      	ldr	r3, [pc, #212]	; (8000d98 <MX_GPIO_Init+0xf8>)
 8000cc2:	699b      	ldr	r3, [r3, #24]
 8000cc4:	f003 0310 	and.w	r3, r3, #16
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ccc:	4b32      	ldr	r3, [pc, #200]	; (8000d98 <MX_GPIO_Init+0xf8>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	4a31      	ldr	r2, [pc, #196]	; (8000d98 <MX_GPIO_Init+0xf8>)
 8000cd2:	f043 0320 	orr.w	r3, r3, #32
 8000cd6:	6193      	str	r3, [r2, #24]
 8000cd8:	4b2f      	ldr	r3, [pc, #188]	; (8000d98 <MX_GPIO_Init+0xf8>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	f003 0320 	and.w	r3, r3, #32
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce4:	4b2c      	ldr	r3, [pc, #176]	; (8000d98 <MX_GPIO_Init+0xf8>)
 8000ce6:	699b      	ldr	r3, [r3, #24]
 8000ce8:	4a2b      	ldr	r2, [pc, #172]	; (8000d98 <MX_GPIO_Init+0xf8>)
 8000cea:	f043 0304 	orr.w	r3, r3, #4
 8000cee:	6193      	str	r3, [r2, #24]
 8000cf0:	4b29      	ldr	r3, [pc, #164]	; (8000d98 <MX_GPIO_Init+0xf8>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	f003 0304 	and.w	r3, r3, #4
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfc:	4b26      	ldr	r3, [pc, #152]	; (8000d98 <MX_GPIO_Init+0xf8>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	4a25      	ldr	r2, [pc, #148]	; (8000d98 <MX_GPIO_Init+0xf8>)
 8000d02:	f043 0308 	orr.w	r3, r3, #8
 8000d06:	6193      	str	r3, [r2, #24]
 8000d08:	4b23      	ldr	r3, [pc, #140]	; (8000d98 <MX_GPIO_Init+0xf8>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	f003 0308 	and.w	r3, r3, #8
 8000d10:	603b      	str	r3, [r7, #0]
 8000d12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000d14:	2200      	movs	r2, #0
 8000d16:	f640 717e 	movw	r1, #3966	; 0xf7e
 8000d1a:	4820      	ldr	r0, [pc, #128]	; (8000d9c <MX_GPIO_Init+0xfc>)
 8000d1c:	f001 f8e6 	bl	8001eec <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8000d20:	2200      	movs	r2, #0
 8000d22:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000d26:	481e      	ldr	r0, [pc, #120]	; (8000da0 <MX_GPIO_Init+0x100>)
 8000d28:	f001 f8e0 	bl	8001eec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 PA8 PA9
                           PA10 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8000d2c:	f640 737e 	movw	r3, #3966	; 0xf7e
 8000d30:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d32:	2301      	movs	r3, #1
 8000d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3e:	f107 0310 	add.w	r3, r7, #16
 8000d42:	4619      	mov	r1, r3
 8000d44:	4815      	ldr	r0, [pc, #84]	; (8000d9c <MX_GPIO_Init+0xfc>)
 8000d46:	f000 ff55 	bl	8001bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d4e:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <MX_GPIO_Init+0x104>)
 8000d50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d56:	f107 0310 	add.w	r3, r7, #16
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4810      	ldr	r0, [pc, #64]	; (8000da0 <MX_GPIO_Init+0x100>)
 8000d5e:	f000 ff49 	bl	8001bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d62:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2302      	movs	r3, #2
 8000d72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4809      	ldr	r0, [pc, #36]	; (8000da0 <MX_GPIO_Init+0x100>)
 8000d7c:	f000 ff3a 	bl	8001bf4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2100      	movs	r1, #0
 8000d84:	2006      	movs	r0, #6
 8000d86:	f000 fefe 	bl	8001b86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000d8a:	2006      	movs	r0, #6
 8000d8c:	f000 ff17 	bl	8001bbe <HAL_NVIC_EnableIRQ>

}
 8000d90:	bf00      	nop
 8000d92:	3720      	adds	r7, #32
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	40010800 	.word	0x40010800
 8000da0:	40010c00 	.word	0x40010c00
 8000da4:	10110000 	.word	0x10110000

08000da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dac:	b672      	cpsid	i
}
 8000dae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <Error_Handler+0x8>
	...

08000db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dba:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <HAL_MspInit+0x40>)
 8000dbc:	699b      	ldr	r3, [r3, #24]
 8000dbe:	4a0d      	ldr	r2, [pc, #52]	; (8000df4 <HAL_MspInit+0x40>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6193      	str	r3, [r2, #24]
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <HAL_MspInit+0x40>)
 8000dc8:	699b      	ldr	r3, [r3, #24]
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd2:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <HAL_MspInit+0x40>)
 8000dd4:	69db      	ldr	r3, [r3, #28]
 8000dd6:	4a07      	ldr	r2, [pc, #28]	; (8000df4 <HAL_MspInit+0x40>)
 8000dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ddc:	61d3      	str	r3, [r2, #28]
 8000dde:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <HAL_MspInit+0x40>)
 8000de0:	69db      	ldr	r3, [r3, #28]
 8000de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de6:	603b      	str	r3, [r7, #0]
 8000de8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr
 8000df4:	40021000 	.word	0x40021000

08000df8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	; 0x28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 0318 	add.w	r3, r7, #24
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a1f      	ldr	r2, [pc, #124]	; (8000e90 <HAL_ADC_MspInit+0x98>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d137      	bne.n	8000e88 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e18:	4b1e      	ldr	r3, [pc, #120]	; (8000e94 <HAL_ADC_MspInit+0x9c>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	4a1d      	ldr	r2, [pc, #116]	; (8000e94 <HAL_ADC_MspInit+0x9c>)
 8000e1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e22:	6193      	str	r3, [r2, #24]
 8000e24:	4b1b      	ldr	r3, [pc, #108]	; (8000e94 <HAL_ADC_MspInit+0x9c>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e30:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <HAL_ADC_MspInit+0x9c>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	4a17      	ldr	r2, [pc, #92]	; (8000e94 <HAL_ADC_MspInit+0x9c>)
 8000e36:	f043 0304 	orr.w	r3, r3, #4
 8000e3a:	6193      	str	r3, [r2, #24]
 8000e3c:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <HAL_ADC_MspInit+0x9c>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	f003 0304 	and.w	r3, r3, #4
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <HAL_ADC_MspInit+0x9c>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	4a11      	ldr	r2, [pc, #68]	; (8000e94 <HAL_ADC_MspInit+0x9c>)
 8000e4e:	f043 0308 	orr.w	r3, r3, #8
 8000e52:	6193      	str	r3, [r2, #24]
 8000e54:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <HAL_ADC_MspInit+0x9c>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	f003 0308 	and.w	r3, r3, #8
 8000e5c:	60fb      	str	r3, [r7, #12]
 8000e5e:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7;
 8000e60:	2381      	movs	r3, #129	; 0x81
 8000e62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e64:	2303      	movs	r3, #3
 8000e66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e68:	f107 0318 	add.w	r3, r7, #24
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	480a      	ldr	r0, [pc, #40]	; (8000e98 <HAL_ADC_MspInit+0xa0>)
 8000e70:	f000 fec0 	bl	8001bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e74:	2302      	movs	r3, #2
 8000e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7c:	f107 0318 	add.w	r3, r7, #24
 8000e80:	4619      	mov	r1, r3
 8000e82:	4806      	ldr	r0, [pc, #24]	; (8000e9c <HAL_ADC_MspInit+0xa4>)
 8000e84:	f000 feb6 	bl	8001bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e88:	bf00      	nop
 8000e8a:	3728      	adds	r7, #40	; 0x28
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40012400 	.word	0x40012400
 8000e94:	40021000 	.word	0x40021000
 8000e98:	40010800 	.word	0x40010800
 8000e9c:	40010c00 	.word	0x40010c00

08000ea0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000eb0:	d113      	bne.n	8000eda <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <HAL_TIM_Base_MspInit+0x44>)
 8000eb4:	69db      	ldr	r3, [r3, #28]
 8000eb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ee4 <HAL_TIM_Base_MspInit+0x44>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	61d3      	str	r3, [r2, #28]
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <HAL_TIM_Base_MspInit+0x44>)
 8000ec0:	69db      	ldr	r3, [r3, #28]
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2100      	movs	r1, #0
 8000ece:	201c      	movs	r0, #28
 8000ed0:	f000 fe59 	bl	8001b86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ed4:	201c      	movs	r0, #28
 8000ed6:	f000 fe72 	bl	8001bbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000eda:	bf00      	nop
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40021000 	.word	0x40021000

08000ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <NMI_Handler+0x4>

08000eee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <HardFault_Handler+0x4>

08000ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <MemManage_Handler+0x4>

08000efa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efe:	e7fe      	b.n	8000efe <BusFault_Handler+0x4>

08000f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <UsageFault_Handler+0x4>

08000f06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr

08000f12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr

08000f1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bc80      	pop	{r7}
 8000f28:	4770      	bx	lr

08000f2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f2e:	f000 f8bb 	bl	80010a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f000 ffee 	bl	8001f1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f48:	4802      	ldr	r0, [pc, #8]	; (8000f54 <TIM2_IRQHandler+0x10>)
 8000f4a:	f001 fe17 	bl	8002b7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	200000c0 	.word	0x200000c0

08000f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f60:	4a14      	ldr	r2, [pc, #80]	; (8000fb4 <_sbrk+0x5c>)
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <_sbrk+0x60>)
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f6c:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <_sbrk+0x64>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d102      	bne.n	8000f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <_sbrk+0x64>)
 8000f76:	4a12      	ldr	r2, [pc, #72]	; (8000fc0 <_sbrk+0x68>)
 8000f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f7a:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <_sbrk+0x64>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d207      	bcs.n	8000f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f88:	f002 f940 	bl	800320c <__errno>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	220c      	movs	r2, #12
 8000f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295
 8000f96:	e009      	b.n	8000fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <_sbrk+0x64>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f9e:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <_sbrk+0x64>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	4a05      	ldr	r2, [pc, #20]	; (8000fbc <_sbrk+0x64>)
 8000fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000faa:	68fb      	ldr	r3, [r7, #12]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20002800 	.word	0x20002800
 8000fb8:	00000400 	.word	0x00000400
 8000fbc:	2000010c 	.word	0x2000010c
 8000fc0:	20000128 	.word	0x20000128

08000fc4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr

08000fd0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fd0:	480c      	ldr	r0, [pc, #48]	; (8001004 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fd2:	490d      	ldr	r1, [pc, #52]	; (8001008 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fd4:	4a0d      	ldr	r2, [pc, #52]	; (800100c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd8:	e002      	b.n	8000fe0 <LoopCopyDataInit>

08000fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fde:	3304      	adds	r3, #4

08000fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe4:	d3f9      	bcc.n	8000fda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fe8:	4c0a      	ldr	r4, [pc, #40]	; (8001014 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fec:	e001      	b.n	8000ff2 <LoopFillZerobss>

08000fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff0:	3204      	adds	r2, #4

08000ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff4:	d3fb      	bcc.n	8000fee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ff6:	f7ff ffe5 	bl	8000fc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ffa:	f002 f90d 	bl	8003218 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ffe:	f7ff fc03 	bl	8000808 <main>
  bx lr
 8001002:	4770      	bx	lr
  ldr r0, =_sdata
 8001004:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001008:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800100c:	08003c20 	.word	0x08003c20
  ldr r2, =_sbss
 8001010:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001014:	20000124 	.word	0x20000124

08001018 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001018:	e7fe      	b.n	8001018 <ADC1_2_IRQHandler>
	...

0800101c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <HAL_Init+0x28>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a07      	ldr	r2, [pc, #28]	; (8001044 <HAL_Init+0x28>)
 8001026:	f043 0310 	orr.w	r3, r3, #16
 800102a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800102c:	2003      	movs	r0, #3
 800102e:	f000 fd9f 	bl	8001b70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001032:	200f      	movs	r0, #15
 8001034:	f000 f808 	bl	8001048 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001038:	f7ff febc 	bl	8000db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40022000 	.word	0x40022000

08001048 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001050:	4b12      	ldr	r3, [pc, #72]	; (800109c <HAL_InitTick+0x54>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <HAL_InitTick+0x58>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	4619      	mov	r1, r3
 800105a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800105e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001062:	fbb2 f3f3 	udiv	r3, r2, r3
 8001066:	4618      	mov	r0, r3
 8001068:	f000 fdb7 	bl	8001bda <HAL_SYSTICK_Config>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e00e      	b.n	8001094 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2b0f      	cmp	r3, #15
 800107a:	d80a      	bhi.n	8001092 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800107c:	2200      	movs	r2, #0
 800107e:	6879      	ldr	r1, [r7, #4]
 8001080:	f04f 30ff 	mov.w	r0, #4294967295
 8001084:	f000 fd7f 	bl	8001b86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001088:	4a06      	ldr	r2, [pc, #24]	; (80010a4 <HAL_InitTick+0x5c>)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800108e:	2300      	movs	r3, #0
 8001090:	e000      	b.n	8001094 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
}
 8001094:	4618      	mov	r0, r3
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000004 	.word	0x20000004
 80010a0:	2000000c 	.word	0x2000000c
 80010a4:	20000008 	.word	0x20000008

080010a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010ac:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <HAL_IncTick+0x1c>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <HAL_IncTick+0x20>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4413      	add	r3, r2
 80010b8:	4a03      	ldr	r2, [pc, #12]	; (80010c8 <HAL_IncTick+0x20>)
 80010ba:	6013      	str	r3, [r2, #0]
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr
 80010c4:	2000000c 	.word	0x2000000c
 80010c8:	20000110 	.word	0x20000110

080010cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  return uwTick;
 80010d0:	4b02      	ldr	r3, [pc, #8]	; (80010dc <HAL_GetTick+0x10>)
 80010d2:	681b      	ldr	r3, [r3, #0]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr
 80010dc:	20000110 	.word	0x20000110

080010e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e8:	f7ff fff0 	bl	80010cc <HAL_GetTick>
 80010ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f8:	d005      	beq.n	8001106 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010fa:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <HAL_Delay+0x44>)
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	461a      	mov	r2, r3
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	4413      	add	r3, r2
 8001104:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001106:	bf00      	nop
 8001108:	f7ff ffe0 	bl	80010cc <HAL_GetTick>
 800110c:	4602      	mov	r2, r0
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	429a      	cmp	r2, r3
 8001116:	d8f7      	bhi.n	8001108 <HAL_Delay+0x28>
  {
  }
}
 8001118:	bf00      	nop
 800111a:	bf00      	nop
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	2000000c 	.word	0x2000000c

08001128 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001130:	2300      	movs	r3, #0
 8001132:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001134:	2300      	movs	r3, #0
 8001136:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001138:	2300      	movs	r3, #0
 800113a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d101      	bne.n	800114a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e0be      	b.n	80012c8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001154:	2b00      	cmp	r3, #0
 8001156:	d109      	bne.n	800116c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2200      	movs	r2, #0
 800115c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff fe46 	bl	8000df8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f000 fbf1 	bl	8001954 <ADC_ConversionStop_Disable>
 8001172:	4603      	mov	r3, r0
 8001174:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800117a:	f003 0310 	and.w	r3, r3, #16
 800117e:	2b00      	cmp	r3, #0
 8001180:	f040 8099 	bne.w	80012b6 <HAL_ADC_Init+0x18e>
 8001184:	7dfb      	ldrb	r3, [r7, #23]
 8001186:	2b00      	cmp	r3, #0
 8001188:	f040 8095 	bne.w	80012b6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001190:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001194:	f023 0302 	bic.w	r3, r3, #2
 8001198:	f043 0202 	orr.w	r2, r3, #2
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011a8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	7b1b      	ldrb	r3, [r3, #12]
 80011ae:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80011b0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011b2:	68ba      	ldr	r2, [r7, #8]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011c0:	d003      	beq.n	80011ca <HAL_ADC_Init+0xa2>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d102      	bne.n	80011d0 <HAL_ADC_Init+0xa8>
 80011ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011ce:	e000      	b.n	80011d2 <HAL_ADC_Init+0xaa>
 80011d0:	2300      	movs	r3, #0
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	7d1b      	ldrb	r3, [r3, #20]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d119      	bne.n	8001214 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	7b1b      	ldrb	r3, [r3, #12]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d109      	bne.n	80011fc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	3b01      	subs	r3, #1
 80011ee:	035a      	lsls	r2, r3, #13
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	e00b      	b.n	8001214 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001200:	f043 0220 	orr.w	r2, r3, #32
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800120c:	f043 0201 	orr.w	r2, r3, #1
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	430a      	orrs	r2, r1
 8001226:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	4b28      	ldr	r3, [pc, #160]	; (80012d0 <HAL_ADC_Init+0x1a8>)
 8001230:	4013      	ands	r3, r2
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	6812      	ldr	r2, [r2, #0]
 8001236:	68b9      	ldr	r1, [r7, #8]
 8001238:	430b      	orrs	r3, r1
 800123a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001244:	d003      	beq.n	800124e <HAL_ADC_Init+0x126>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d104      	bne.n	8001258 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	3b01      	subs	r3, #1
 8001254:	051b      	lsls	r3, r3, #20
 8001256:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800125e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	430a      	orrs	r2, r1
 800126a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	689a      	ldr	r2, [r3, #8]
 8001272:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <HAL_ADC_Init+0x1ac>)
 8001274:	4013      	ands	r3, r2
 8001276:	68ba      	ldr	r2, [r7, #8]
 8001278:	429a      	cmp	r2, r3
 800127a:	d10b      	bne.n	8001294 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001286:	f023 0303 	bic.w	r3, r3, #3
 800128a:	f043 0201 	orr.w	r2, r3, #1
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001292:	e018      	b.n	80012c6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001298:	f023 0312 	bic.w	r3, r3, #18
 800129c:	f043 0210 	orr.w	r2, r3, #16
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a8:	f043 0201 	orr.w	r2, r3, #1
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012b4:	e007      	b.n	80012c6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ba:	f043 0210 	orr.w	r2, r3, #16
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80012c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3718      	adds	r7, #24
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	ffe1f7fd 	.word	0xffe1f7fd
 80012d4:	ff1f0efe 	.word	0xff1f0efe

080012d8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012e0:	2300      	movs	r3, #0
 80012e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d101      	bne.n	80012f2 <HAL_ADC_Start+0x1a>
 80012ee:	2302      	movs	r3, #2
 80012f0:	e098      	b.n	8001424 <HAL_ADC_Start+0x14c>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2201      	movs	r2, #1
 80012f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f000 fad0 	bl	80018a0 <ADC_Enable>
 8001300:	4603      	mov	r3, r0
 8001302:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001304:	7bfb      	ldrb	r3, [r7, #15]
 8001306:	2b00      	cmp	r3, #0
 8001308:	f040 8087 	bne.w	800141a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001310:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001314:	f023 0301 	bic.w	r3, r3, #1
 8001318:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a41      	ldr	r2, [pc, #260]	; (800142c <HAL_ADC_Start+0x154>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d105      	bne.n	8001336 <HAL_ADC_Start+0x5e>
 800132a:	4b41      	ldr	r3, [pc, #260]	; (8001430 <HAL_ADC_Start+0x158>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001332:	2b00      	cmp	r3, #0
 8001334:	d115      	bne.n	8001362 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800133a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800134c:	2b00      	cmp	r3, #0
 800134e:	d026      	beq.n	800139e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001354:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001358:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001360:	e01d      	b.n	800139e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001366:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a2f      	ldr	r2, [pc, #188]	; (8001430 <HAL_ADC_Start+0x158>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d004      	beq.n	8001382 <HAL_ADC_Start+0xaa>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a2b      	ldr	r2, [pc, #172]	; (800142c <HAL_ADC_Start+0x154>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d10d      	bne.n	800139e <HAL_ADC_Start+0xc6>
 8001382:	4b2b      	ldr	r3, [pc, #172]	; (8001430 <HAL_ADC_Start+0x158>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800138a:	2b00      	cmp	r3, #0
 800138c:	d007      	beq.n	800139e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001392:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001396:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d006      	beq.n	80013b8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ae:	f023 0206 	bic.w	r2, r3, #6
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80013b6:	e002      	b.n	80013be <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f06f 0202 	mvn.w	r2, #2
 80013ce:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80013da:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80013de:	d113      	bne.n	8001408 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80013e4:	4a11      	ldr	r2, [pc, #68]	; (800142c <HAL_ADC_Start+0x154>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d105      	bne.n	80013f6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80013ea:	4b11      	ldr	r3, [pc, #68]	; (8001430 <HAL_ADC_Start+0x158>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d108      	bne.n	8001408 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	e00c      	b.n	8001422 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	689a      	ldr	r2, [r3, #8]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	e003      	b.n	8001422 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001422:	7bfb      	ldrb	r3, [r7, #15]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	40012800 	.word	0x40012800
 8001430:	40012400 	.word	0x40012400

08001434 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800143c:	2300      	movs	r3, #0
 800143e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001446:	2b01      	cmp	r3, #1
 8001448:	d101      	bne.n	800144e <HAL_ADC_Stop+0x1a>
 800144a:	2302      	movs	r3, #2
 800144c:	e01a      	b.n	8001484 <HAL_ADC_Stop+0x50>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2201      	movs	r2, #1
 8001452:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 fa7c 	bl	8001954 <ADC_ConversionStop_Disable>
 800145c:	4603      	mov	r3, r0
 800145e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001460:	7bfb      	ldrb	r3, [r7, #15]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d109      	bne.n	800147a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800146a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800146e:	f023 0301 	bic.w	r3, r3, #1
 8001472:	f043 0201 	orr.w	r2, r3, #1
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001482:	7bfb      	ldrb	r3, [r7, #15]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800148c:	b590      	push	{r4, r7, lr}
 800148e:	b087      	sub	sp, #28
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80014a2:	f7ff fe13 	bl	80010cc <HAL_GetTick>
 80014a6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d00b      	beq.n	80014ce <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ba:	f043 0220 	orr.w	r2, r3, #32
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e0d3      	b.n	8001676 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d131      	bne.n	8001540 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d12a      	bne.n	8001540 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80014ea:	e021      	b.n	8001530 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f2:	d01d      	beq.n	8001530 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d007      	beq.n	800150a <HAL_ADC_PollForConversion+0x7e>
 80014fa:	f7ff fde7 	bl	80010cc <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	429a      	cmp	r2, r3
 8001508:	d212      	bcs.n	8001530 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d10b      	bne.n	8001530 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800151c:	f043 0204 	orr.w	r2, r3, #4
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e0a2      	b.n	8001676 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0d6      	beq.n	80014ec <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800153e:	e070      	b.n	8001622 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001540:	4b4f      	ldr	r3, [pc, #316]	; (8001680 <HAL_ADC_PollForConversion+0x1f4>)
 8001542:	681c      	ldr	r4, [r3, #0]
 8001544:	2002      	movs	r0, #2
 8001546:	f001 f9bd 	bl	80028c4 <HAL_RCCEx_GetPeriphCLKFreq>
 800154a:	4603      	mov	r3, r0
 800154c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	6919      	ldr	r1, [r3, #16]
 8001556:	4b4b      	ldr	r3, [pc, #300]	; (8001684 <HAL_ADC_PollForConversion+0x1f8>)
 8001558:	400b      	ands	r3, r1
 800155a:	2b00      	cmp	r3, #0
 800155c:	d118      	bne.n	8001590 <HAL_ADC_PollForConversion+0x104>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	68d9      	ldr	r1, [r3, #12]
 8001564:	4b48      	ldr	r3, [pc, #288]	; (8001688 <HAL_ADC_PollForConversion+0x1fc>)
 8001566:	400b      	ands	r3, r1
 8001568:	2b00      	cmp	r3, #0
 800156a:	d111      	bne.n	8001590 <HAL_ADC_PollForConversion+0x104>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6919      	ldr	r1, [r3, #16]
 8001572:	4b46      	ldr	r3, [pc, #280]	; (800168c <HAL_ADC_PollForConversion+0x200>)
 8001574:	400b      	ands	r3, r1
 8001576:	2b00      	cmp	r3, #0
 8001578:	d108      	bne.n	800158c <HAL_ADC_PollForConversion+0x100>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	68d9      	ldr	r1, [r3, #12]
 8001580:	4b43      	ldr	r3, [pc, #268]	; (8001690 <HAL_ADC_PollForConversion+0x204>)
 8001582:	400b      	ands	r3, r1
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <HAL_ADC_PollForConversion+0x100>
 8001588:	2314      	movs	r3, #20
 800158a:	e020      	b.n	80015ce <HAL_ADC_PollForConversion+0x142>
 800158c:	2329      	movs	r3, #41	; 0x29
 800158e:	e01e      	b.n	80015ce <HAL_ADC_PollForConversion+0x142>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6919      	ldr	r1, [r3, #16]
 8001596:	4b3d      	ldr	r3, [pc, #244]	; (800168c <HAL_ADC_PollForConversion+0x200>)
 8001598:	400b      	ands	r3, r1
 800159a:	2b00      	cmp	r3, #0
 800159c:	d106      	bne.n	80015ac <HAL_ADC_PollForConversion+0x120>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	68d9      	ldr	r1, [r3, #12]
 80015a4:	4b3a      	ldr	r3, [pc, #232]	; (8001690 <HAL_ADC_PollForConversion+0x204>)
 80015a6:	400b      	ands	r3, r1
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d00d      	beq.n	80015c8 <HAL_ADC_PollForConversion+0x13c>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6919      	ldr	r1, [r3, #16]
 80015b2:	4b38      	ldr	r3, [pc, #224]	; (8001694 <HAL_ADC_PollForConversion+0x208>)
 80015b4:	400b      	ands	r3, r1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d108      	bne.n	80015cc <HAL_ADC_PollForConversion+0x140>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68d9      	ldr	r1, [r3, #12]
 80015c0:	4b34      	ldr	r3, [pc, #208]	; (8001694 <HAL_ADC_PollForConversion+0x208>)
 80015c2:	400b      	ands	r3, r1
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d101      	bne.n	80015cc <HAL_ADC_PollForConversion+0x140>
 80015c8:	2354      	movs	r3, #84	; 0x54
 80015ca:	e000      	b.n	80015ce <HAL_ADC_PollForConversion+0x142>
 80015cc:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80015ce:	fb02 f303 	mul.w	r3, r2, r3
 80015d2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80015d4:	e021      	b.n	800161a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015dc:	d01a      	beq.n	8001614 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d007      	beq.n	80015f4 <HAL_ADC_PollForConversion+0x168>
 80015e4:	f7ff fd72 	bl	80010cc <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	683a      	ldr	r2, [r7, #0]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d20f      	bcs.n	8001614 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d90b      	bls.n	8001614 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001600:	f043 0204 	orr.w	r2, r3, #4
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e030      	b.n	8001676 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	3301      	adds	r3, #1
 8001618:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	429a      	cmp	r2, r3
 8001620:	d8d9      	bhi.n	80015d6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f06f 0212 	mvn.w	r2, #18
 800162a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001630:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001642:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001646:	d115      	bne.n	8001674 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800164c:	2b00      	cmp	r3, #0
 800164e:	d111      	bne.n	8001674 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001654:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001660:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d105      	bne.n	8001674 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166c:	f043 0201 	orr.w	r2, r3, #1
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	371c      	adds	r7, #28
 800167a:	46bd      	mov	sp, r7
 800167c:	bd90      	pop	{r4, r7, pc}
 800167e:	bf00      	nop
 8001680:	20000004 	.word	0x20000004
 8001684:	24924924 	.word	0x24924924
 8001688:	00924924 	.word	0x00924924
 800168c:	12492492 	.word	0x12492492
 8001690:	00492492 	.word	0x00492492
 8001694:	00249249 	.word	0x00249249

08001698 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr

080016b0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016ba:	2300      	movs	r3, #0
 80016bc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80016be:	2300      	movs	r3, #0
 80016c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d101      	bne.n	80016d0 <HAL_ADC_ConfigChannel+0x20>
 80016cc:	2302      	movs	r3, #2
 80016ce:	e0dc      	b.n	800188a <HAL_ADC_ConfigChannel+0x1da>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b06      	cmp	r3, #6
 80016de:	d81c      	bhi.n	800171a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685a      	ldr	r2, [r3, #4]
 80016ea:	4613      	mov	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	3b05      	subs	r3, #5
 80016f2:	221f      	movs	r2, #31
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	4019      	ands	r1, r3
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	6818      	ldr	r0, [r3, #0]
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	3b05      	subs	r3, #5
 800170c:	fa00 f203 	lsl.w	r2, r0, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	430a      	orrs	r2, r1
 8001716:	635a      	str	r2, [r3, #52]	; 0x34
 8001718:	e03c      	b.n	8001794 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b0c      	cmp	r3, #12
 8001720:	d81c      	bhi.n	800175c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685a      	ldr	r2, [r3, #4]
 800172c:	4613      	mov	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	4413      	add	r3, r2
 8001732:	3b23      	subs	r3, #35	; 0x23
 8001734:	221f      	movs	r2, #31
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43db      	mvns	r3, r3
 800173c:	4019      	ands	r1, r3
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	6818      	ldr	r0, [r3, #0]
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	4613      	mov	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	3b23      	subs	r3, #35	; 0x23
 800174e:	fa00 f203 	lsl.w	r2, r0, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	430a      	orrs	r2, r1
 8001758:	631a      	str	r2, [r3, #48]	; 0x30
 800175a:	e01b      	b.n	8001794 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	4613      	mov	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4413      	add	r3, r2
 800176c:	3b41      	subs	r3, #65	; 0x41
 800176e:	221f      	movs	r2, #31
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	4019      	ands	r1, r3
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	6818      	ldr	r0, [r3, #0]
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	4613      	mov	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	3b41      	subs	r3, #65	; 0x41
 8001788:	fa00 f203 	lsl.w	r2, r0, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	430a      	orrs	r2, r1
 8001792:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b09      	cmp	r3, #9
 800179a:	d91c      	bls.n	80017d6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	68d9      	ldr	r1, [r3, #12]
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	4613      	mov	r3, r2
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	4413      	add	r3, r2
 80017ac:	3b1e      	subs	r3, #30
 80017ae:	2207      	movs	r2, #7
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	4019      	ands	r1, r3
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	6898      	ldr	r0, [r3, #8]
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4613      	mov	r3, r2
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	4413      	add	r3, r2
 80017c6:	3b1e      	subs	r3, #30
 80017c8:	fa00 f203 	lsl.w	r2, r0, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	60da      	str	r2, [r3, #12]
 80017d4:	e019      	b.n	800180a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	6919      	ldr	r1, [r3, #16]
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	4613      	mov	r3, r2
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	4413      	add	r3, r2
 80017e6:	2207      	movs	r2, #7
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	4019      	ands	r1, r3
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	6898      	ldr	r0, [r3, #8]
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	4613      	mov	r3, r2
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	4413      	add	r3, r2
 80017fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	430a      	orrs	r2, r1
 8001808:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2b10      	cmp	r3, #16
 8001810:	d003      	beq.n	800181a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001816:	2b11      	cmp	r3, #17
 8001818:	d132      	bne.n	8001880 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a1d      	ldr	r2, [pc, #116]	; (8001894 <HAL_ADC_ConfigChannel+0x1e4>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d125      	bne.n	8001870 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d126      	bne.n	8001880 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001840:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2b10      	cmp	r3, #16
 8001848:	d11a      	bne.n	8001880 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800184a:	4b13      	ldr	r3, [pc, #76]	; (8001898 <HAL_ADC_ConfigChannel+0x1e8>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a13      	ldr	r2, [pc, #76]	; (800189c <HAL_ADC_ConfigChannel+0x1ec>)
 8001850:	fba2 2303 	umull	r2, r3, r2, r3
 8001854:	0c9a      	lsrs	r2, r3, #18
 8001856:	4613      	mov	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001860:	e002      	b.n	8001868 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	3b01      	subs	r3, #1
 8001866:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f9      	bne.n	8001862 <HAL_ADC_ConfigChannel+0x1b2>
 800186e:	e007      	b.n	8001880 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001874:	f043 0220 	orr.w	r2, r3, #32
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001888:	7bfb      	ldrb	r3, [r7, #15]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr
 8001894:	40012400 	.word	0x40012400
 8001898:	20000004 	.word	0x20000004
 800189c:	431bde83 	.word	0x431bde83

080018a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018a8:	2300      	movs	r3, #0
 80018aa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80018ac:	2300      	movs	r3, #0
 80018ae:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d040      	beq.n	8001940 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689a      	ldr	r2, [r3, #8]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f042 0201 	orr.w	r2, r2, #1
 80018cc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018ce:	4b1f      	ldr	r3, [pc, #124]	; (800194c <ADC_Enable+0xac>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a1f      	ldr	r2, [pc, #124]	; (8001950 <ADC_Enable+0xb0>)
 80018d4:	fba2 2303 	umull	r2, r3, r2, r3
 80018d8:	0c9b      	lsrs	r3, r3, #18
 80018da:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80018dc:	e002      	b.n	80018e4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	3b01      	subs	r3, #1
 80018e2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f9      	bne.n	80018de <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80018ea:	f7ff fbef 	bl	80010cc <HAL_GetTick>
 80018ee:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80018f0:	e01f      	b.n	8001932 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80018f2:	f7ff fbeb 	bl	80010cc <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d918      	bls.n	8001932 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b01      	cmp	r3, #1
 800190c:	d011      	beq.n	8001932 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001912:	f043 0210 	orr.w	r2, r3, #16
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191e:	f043 0201 	orr.w	r2, r3, #1
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e007      	b.n	8001942 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	2b01      	cmp	r3, #1
 800193e:	d1d8      	bne.n	80018f2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000004 	.word	0x20000004
 8001950:	431bde83 	.word	0x431bde83

08001954 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800195c:	2300      	movs	r3, #0
 800195e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b01      	cmp	r3, #1
 800196c:	d12e      	bne.n	80019cc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 0201 	bic.w	r2, r2, #1
 800197c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800197e:	f7ff fba5 	bl	80010cc <HAL_GetTick>
 8001982:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001984:	e01b      	b.n	80019be <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001986:	f7ff fba1 	bl	80010cc <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	2b02      	cmp	r3, #2
 8001992:	d914      	bls.n	80019be <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d10d      	bne.n	80019be <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a6:	f043 0210 	orr.w	r2, r3, #16
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b2:	f043 0201 	orr.w	r2, r3, #1
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e007      	b.n	80019ce <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d0dc      	beq.n	8001986 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <__NVIC_SetPriorityGrouping+0x44>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ee:	68ba      	ldr	r2, [r7, #8]
 80019f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019f4:	4013      	ands	r3, r2
 80019f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a0a:	4a04      	ldr	r2, [pc, #16]	; (8001a1c <__NVIC_SetPriorityGrouping+0x44>)
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	60d3      	str	r3, [r2, #12]
}
 8001a10:	bf00      	nop
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	e000ed00 	.word	0xe000ed00

08001a20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a24:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <__NVIC_GetPriorityGrouping+0x18>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	0a1b      	lsrs	r3, r3, #8
 8001a2a:	f003 0307 	and.w	r3, r3, #7
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bc80      	pop	{r7}
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	e000ed00 	.word	0xe000ed00

08001a3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	db0b      	blt.n	8001a66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	f003 021f 	and.w	r2, r3, #31
 8001a54:	4906      	ldr	r1, [pc, #24]	; (8001a70 <__NVIC_EnableIRQ+0x34>)
 8001a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5a:	095b      	lsrs	r3, r3, #5
 8001a5c:	2001      	movs	r0, #1
 8001a5e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr
 8001a70:	e000e100 	.word	0xe000e100

08001a74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	6039      	str	r1, [r7, #0]
 8001a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	db0a      	blt.n	8001a9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	490c      	ldr	r1, [pc, #48]	; (8001ac0 <__NVIC_SetPriority+0x4c>)
 8001a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a92:	0112      	lsls	r2, r2, #4
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	440b      	add	r3, r1
 8001a98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a9c:	e00a      	b.n	8001ab4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	4908      	ldr	r1, [pc, #32]	; (8001ac4 <__NVIC_SetPriority+0x50>)
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	f003 030f 	and.w	r3, r3, #15
 8001aaa:	3b04      	subs	r3, #4
 8001aac:	0112      	lsls	r2, r2, #4
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	440b      	add	r3, r1
 8001ab2:	761a      	strb	r2, [r3, #24]
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	e000e100 	.word	0xe000e100
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b089      	sub	sp, #36	; 0x24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	f1c3 0307 	rsb	r3, r3, #7
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	bf28      	it	cs
 8001ae6:	2304      	movcs	r3, #4
 8001ae8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	3304      	adds	r3, #4
 8001aee:	2b06      	cmp	r3, #6
 8001af0:	d902      	bls.n	8001af8 <NVIC_EncodePriority+0x30>
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	3b03      	subs	r3, #3
 8001af6:	e000      	b.n	8001afa <NVIC_EncodePriority+0x32>
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001afc:	f04f 32ff 	mov.w	r2, #4294967295
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43da      	mvns	r2, r3
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	401a      	ands	r2, r3
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b10:	f04f 31ff 	mov.w	r1, #4294967295
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1a:	43d9      	mvns	r1, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b20:	4313      	orrs	r3, r2
         );
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3724      	adds	r7, #36	; 0x24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr

08001b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b3c:	d301      	bcc.n	8001b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e00f      	b.n	8001b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b42:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <SysTick_Config+0x40>)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3b01      	subs	r3, #1
 8001b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b4a:	210f      	movs	r1, #15
 8001b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b50:	f7ff ff90 	bl	8001a74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b54:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <SysTick_Config+0x40>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b5a:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <SysTick_Config+0x40>)
 8001b5c:	2207      	movs	r2, #7
 8001b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	e000e010 	.word	0xe000e010

08001b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff ff2d 	bl	80019d8 <__NVIC_SetPriorityGrouping>
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b086      	sub	sp, #24
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	607a      	str	r2, [r7, #4]
 8001b92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b98:	f7ff ff42 	bl	8001a20 <__NVIC_GetPriorityGrouping>
 8001b9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	68b9      	ldr	r1, [r7, #8]
 8001ba2:	6978      	ldr	r0, [r7, #20]
 8001ba4:	f7ff ff90 	bl	8001ac8 <NVIC_EncodePriority>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bae:	4611      	mov	r1, r2
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ff5f 	bl	8001a74 <__NVIC_SetPriority>
}
 8001bb6:	bf00      	nop
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff ff35 	bl	8001a3c <__NVIC_EnableIRQ>
}
 8001bd2:	bf00      	nop
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b082      	sub	sp, #8
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff ffa2 	bl	8001b2c <SysTick_Config>
 8001be8:	4603      	mov	r3, r0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b08b      	sub	sp, #44	; 0x2c
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c02:	2300      	movs	r3, #0
 8001c04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c06:	e161      	b.n	8001ecc <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c08:	2201      	movs	r2, #1
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	69fa      	ldr	r2, [r7, #28]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	f040 8150 	bne.w	8001ec6 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	4a97      	ldr	r2, [pc, #604]	; (8001e88 <HAL_GPIO_Init+0x294>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d05e      	beq.n	8001cee <HAL_GPIO_Init+0xfa>
 8001c30:	4a95      	ldr	r2, [pc, #596]	; (8001e88 <HAL_GPIO_Init+0x294>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d875      	bhi.n	8001d22 <HAL_GPIO_Init+0x12e>
 8001c36:	4a95      	ldr	r2, [pc, #596]	; (8001e8c <HAL_GPIO_Init+0x298>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d058      	beq.n	8001cee <HAL_GPIO_Init+0xfa>
 8001c3c:	4a93      	ldr	r2, [pc, #588]	; (8001e8c <HAL_GPIO_Init+0x298>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d86f      	bhi.n	8001d22 <HAL_GPIO_Init+0x12e>
 8001c42:	4a93      	ldr	r2, [pc, #588]	; (8001e90 <HAL_GPIO_Init+0x29c>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d052      	beq.n	8001cee <HAL_GPIO_Init+0xfa>
 8001c48:	4a91      	ldr	r2, [pc, #580]	; (8001e90 <HAL_GPIO_Init+0x29c>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d869      	bhi.n	8001d22 <HAL_GPIO_Init+0x12e>
 8001c4e:	4a91      	ldr	r2, [pc, #580]	; (8001e94 <HAL_GPIO_Init+0x2a0>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d04c      	beq.n	8001cee <HAL_GPIO_Init+0xfa>
 8001c54:	4a8f      	ldr	r2, [pc, #572]	; (8001e94 <HAL_GPIO_Init+0x2a0>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d863      	bhi.n	8001d22 <HAL_GPIO_Init+0x12e>
 8001c5a:	4a8f      	ldr	r2, [pc, #572]	; (8001e98 <HAL_GPIO_Init+0x2a4>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d046      	beq.n	8001cee <HAL_GPIO_Init+0xfa>
 8001c60:	4a8d      	ldr	r2, [pc, #564]	; (8001e98 <HAL_GPIO_Init+0x2a4>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d85d      	bhi.n	8001d22 <HAL_GPIO_Init+0x12e>
 8001c66:	2b12      	cmp	r3, #18
 8001c68:	d82a      	bhi.n	8001cc0 <HAL_GPIO_Init+0xcc>
 8001c6a:	2b12      	cmp	r3, #18
 8001c6c:	d859      	bhi.n	8001d22 <HAL_GPIO_Init+0x12e>
 8001c6e:	a201      	add	r2, pc, #4	; (adr r2, 8001c74 <HAL_GPIO_Init+0x80>)
 8001c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c74:	08001cef 	.word	0x08001cef
 8001c78:	08001cc9 	.word	0x08001cc9
 8001c7c:	08001cdb 	.word	0x08001cdb
 8001c80:	08001d1d 	.word	0x08001d1d
 8001c84:	08001d23 	.word	0x08001d23
 8001c88:	08001d23 	.word	0x08001d23
 8001c8c:	08001d23 	.word	0x08001d23
 8001c90:	08001d23 	.word	0x08001d23
 8001c94:	08001d23 	.word	0x08001d23
 8001c98:	08001d23 	.word	0x08001d23
 8001c9c:	08001d23 	.word	0x08001d23
 8001ca0:	08001d23 	.word	0x08001d23
 8001ca4:	08001d23 	.word	0x08001d23
 8001ca8:	08001d23 	.word	0x08001d23
 8001cac:	08001d23 	.word	0x08001d23
 8001cb0:	08001d23 	.word	0x08001d23
 8001cb4:	08001d23 	.word	0x08001d23
 8001cb8:	08001cd1 	.word	0x08001cd1
 8001cbc:	08001ce5 	.word	0x08001ce5
 8001cc0:	4a76      	ldr	r2, [pc, #472]	; (8001e9c <HAL_GPIO_Init+0x2a8>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d013      	beq.n	8001cee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cc6:	e02c      	b.n	8001d22 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	623b      	str	r3, [r7, #32]
          break;
 8001cce:	e029      	b.n	8001d24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	623b      	str	r3, [r7, #32]
          break;
 8001cd8:	e024      	b.n	8001d24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	3308      	adds	r3, #8
 8001ce0:	623b      	str	r3, [r7, #32]
          break;
 8001ce2:	e01f      	b.n	8001d24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	330c      	adds	r3, #12
 8001cea:	623b      	str	r3, [r7, #32]
          break;
 8001cec:	e01a      	b.n	8001d24 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d102      	bne.n	8001cfc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cf6:	2304      	movs	r3, #4
 8001cf8:	623b      	str	r3, [r7, #32]
          break;
 8001cfa:	e013      	b.n	8001d24 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d105      	bne.n	8001d10 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d04:	2308      	movs	r3, #8
 8001d06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	69fa      	ldr	r2, [r7, #28]
 8001d0c:	611a      	str	r2, [r3, #16]
          break;
 8001d0e:	e009      	b.n	8001d24 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d10:	2308      	movs	r3, #8
 8001d12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	69fa      	ldr	r2, [r7, #28]
 8001d18:	615a      	str	r2, [r3, #20]
          break;
 8001d1a:	e003      	b.n	8001d24 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	623b      	str	r3, [r7, #32]
          break;
 8001d20:	e000      	b.n	8001d24 <HAL_GPIO_Init+0x130>
          break;
 8001d22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	2bff      	cmp	r3, #255	; 0xff
 8001d28:	d801      	bhi.n	8001d2e <HAL_GPIO_Init+0x13a>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	e001      	b.n	8001d32 <HAL_GPIO_Init+0x13e>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3304      	adds	r3, #4
 8001d32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	2bff      	cmp	r3, #255	; 0xff
 8001d38:	d802      	bhi.n	8001d40 <HAL_GPIO_Init+0x14c>
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	e002      	b.n	8001d46 <HAL_GPIO_Init+0x152>
 8001d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d42:	3b08      	subs	r3, #8
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	210f      	movs	r1, #15
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	fa01 f303 	lsl.w	r3, r1, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	401a      	ands	r2, r3
 8001d58:	6a39      	ldr	r1, [r7, #32]
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d60:	431a      	orrs	r2, r3
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 80a9 	beq.w	8001ec6 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d74:	4b4a      	ldr	r3, [pc, #296]	; (8001ea0 <HAL_GPIO_Init+0x2ac>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	4a49      	ldr	r2, [pc, #292]	; (8001ea0 <HAL_GPIO_Init+0x2ac>)
 8001d7a:	f043 0301 	orr.w	r3, r3, #1
 8001d7e:	6193      	str	r3, [r2, #24]
 8001d80:	4b47      	ldr	r3, [pc, #284]	; (8001ea0 <HAL_GPIO_Init+0x2ac>)
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d8c:	4a45      	ldr	r2, [pc, #276]	; (8001ea4 <HAL_GPIO_Init+0x2b0>)
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d90:	089b      	lsrs	r3, r3, #2
 8001d92:	3302      	adds	r3, #2
 8001d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9c:	f003 0303 	and.w	r3, r3, #3
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	220f      	movs	r2, #15
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	43db      	mvns	r3, r3
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	4013      	ands	r3, r2
 8001dae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a3d      	ldr	r2, [pc, #244]	; (8001ea8 <HAL_GPIO_Init+0x2b4>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d00d      	beq.n	8001dd4 <HAL_GPIO_Init+0x1e0>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	4a3c      	ldr	r2, [pc, #240]	; (8001eac <HAL_GPIO_Init+0x2b8>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d007      	beq.n	8001dd0 <HAL_GPIO_Init+0x1dc>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a3b      	ldr	r2, [pc, #236]	; (8001eb0 <HAL_GPIO_Init+0x2bc>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d101      	bne.n	8001dcc <HAL_GPIO_Init+0x1d8>
 8001dc8:	2302      	movs	r3, #2
 8001dca:	e004      	b.n	8001dd6 <HAL_GPIO_Init+0x1e2>
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e002      	b.n	8001dd6 <HAL_GPIO_Init+0x1e2>
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e000      	b.n	8001dd6 <HAL_GPIO_Init+0x1e2>
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dd8:	f002 0203 	and.w	r2, r2, #3
 8001ddc:	0092      	lsls	r2, r2, #2
 8001dde:	4093      	lsls	r3, r2
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001de6:	492f      	ldr	r1, [pc, #188]	; (8001ea4 <HAL_GPIO_Init+0x2b0>)
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	089b      	lsrs	r3, r3, #2
 8001dec:	3302      	adds	r3, #2
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d006      	beq.n	8001e0e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e00:	4b2c      	ldr	r3, [pc, #176]	; (8001eb4 <HAL_GPIO_Init+0x2c0>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	492b      	ldr	r1, [pc, #172]	; (8001eb4 <HAL_GPIO_Init+0x2c0>)
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	600b      	str	r3, [r1, #0]
 8001e0c:	e006      	b.n	8001e1c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e0e:	4b29      	ldr	r3, [pc, #164]	; (8001eb4 <HAL_GPIO_Init+0x2c0>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	4927      	ldr	r1, [pc, #156]	; (8001eb4 <HAL_GPIO_Init+0x2c0>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d006      	beq.n	8001e36 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e28:	4b22      	ldr	r3, [pc, #136]	; (8001eb4 <HAL_GPIO_Init+0x2c0>)
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	4921      	ldr	r1, [pc, #132]	; (8001eb4 <HAL_GPIO_Init+0x2c0>)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	604b      	str	r3, [r1, #4]
 8001e34:	e006      	b.n	8001e44 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e36:	4b1f      	ldr	r3, [pc, #124]	; (8001eb4 <HAL_GPIO_Init+0x2c0>)
 8001e38:	685a      	ldr	r2, [r3, #4]
 8001e3a:	69bb      	ldr	r3, [r7, #24]
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	491d      	ldr	r1, [pc, #116]	; (8001eb4 <HAL_GPIO_Init+0x2c0>)
 8001e40:	4013      	ands	r3, r2
 8001e42:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d006      	beq.n	8001e5e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e50:	4b18      	ldr	r3, [pc, #96]	; (8001eb4 <HAL_GPIO_Init+0x2c0>)
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	4917      	ldr	r1, [pc, #92]	; (8001eb4 <HAL_GPIO_Init+0x2c0>)
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	608b      	str	r3, [r1, #8]
 8001e5c:	e006      	b.n	8001e6c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e5e:	4b15      	ldr	r3, [pc, #84]	; (8001eb4 <HAL_GPIO_Init+0x2c0>)
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	43db      	mvns	r3, r3
 8001e66:	4913      	ldr	r1, [pc, #76]	; (8001eb4 <HAL_GPIO_Init+0x2c0>)
 8001e68:	4013      	ands	r3, r2
 8001e6a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d01f      	beq.n	8001eb8 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e78:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <HAL_GPIO_Init+0x2c0>)
 8001e7a:	68da      	ldr	r2, [r3, #12]
 8001e7c:	490d      	ldr	r1, [pc, #52]	; (8001eb4 <HAL_GPIO_Init+0x2c0>)
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	60cb      	str	r3, [r1, #12]
 8001e84:	e01f      	b.n	8001ec6 <HAL_GPIO_Init+0x2d2>
 8001e86:	bf00      	nop
 8001e88:	10320000 	.word	0x10320000
 8001e8c:	10310000 	.word	0x10310000
 8001e90:	10220000 	.word	0x10220000
 8001e94:	10210000 	.word	0x10210000
 8001e98:	10120000 	.word	0x10120000
 8001e9c:	10110000 	.word	0x10110000
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40010000 	.word	0x40010000
 8001ea8:	40010800 	.word	0x40010800
 8001eac:	40010c00 	.word	0x40010c00
 8001eb0:	40011000 	.word	0x40011000
 8001eb4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ee8 <HAL_GPIO_Init+0x2f4>)
 8001eba:	68da      	ldr	r2, [r3, #12]
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	4909      	ldr	r1, [pc, #36]	; (8001ee8 <HAL_GPIO_Init+0x2f4>)
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	3301      	adds	r3, #1
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f47f ae96 	bne.w	8001c08 <HAL_GPIO_Init+0x14>
  }
}
 8001edc:	bf00      	nop
 8001ede:	bf00      	nop
 8001ee0:	372c      	adds	r7, #44	; 0x2c
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bc80      	pop	{r7}
 8001ee6:	4770      	bx	lr
 8001ee8:	40010400 	.word	0x40010400

08001eec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	807b      	strh	r3, [r7, #2]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001efc:	787b      	ldrb	r3, [r7, #1]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f02:	887a      	ldrh	r2, [r7, #2]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f08:	e003      	b.n	8001f12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f0a:	887b      	ldrh	r3, [r7, #2]
 8001f0c:	041a      	lsls	r2, r3, #16
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	611a      	str	r2, [r3, #16]
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr

08001f1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	4603      	mov	r3, r0
 8001f24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f26:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f28:	695a      	ldr	r2, [r3, #20]
 8001f2a:	88fb      	ldrh	r3, [r7, #6]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d006      	beq.n	8001f40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f32:	4a05      	ldr	r2, [pc, #20]	; (8001f48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f34:	88fb      	ldrh	r3, [r7, #6]
 8001f36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f38:	88fb      	ldrh	r3, [r7, #6]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe fc22 	bl	8000784 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f40:	bf00      	nop
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40010400 	.word	0x40010400

08001f4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e272      	b.n	8002444 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 8087 	beq.w	800207a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f6c:	4b92      	ldr	r3, [pc, #584]	; (80021b8 <HAL_RCC_OscConfig+0x26c>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 030c 	and.w	r3, r3, #12
 8001f74:	2b04      	cmp	r3, #4
 8001f76:	d00c      	beq.n	8001f92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f78:	4b8f      	ldr	r3, [pc, #572]	; (80021b8 <HAL_RCC_OscConfig+0x26c>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f003 030c 	and.w	r3, r3, #12
 8001f80:	2b08      	cmp	r3, #8
 8001f82:	d112      	bne.n	8001faa <HAL_RCC_OscConfig+0x5e>
 8001f84:	4b8c      	ldr	r3, [pc, #560]	; (80021b8 <HAL_RCC_OscConfig+0x26c>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f90:	d10b      	bne.n	8001faa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f92:	4b89      	ldr	r3, [pc, #548]	; (80021b8 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d06c      	beq.n	8002078 <HAL_RCC_OscConfig+0x12c>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d168      	bne.n	8002078 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e24c      	b.n	8002444 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fb2:	d106      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x76>
 8001fb4:	4b80      	ldr	r3, [pc, #512]	; (80021b8 <HAL_RCC_OscConfig+0x26c>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a7f      	ldr	r2, [pc, #508]	; (80021b8 <HAL_RCC_OscConfig+0x26c>)
 8001fba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fbe:	6013      	str	r3, [r2, #0]
 8001fc0:	e02e      	b.n	8002020 <HAL_RCC_OscConfig+0xd4>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10c      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x98>
 8001fca:	4b7b      	ldr	r3, [pc, #492]	; (80021b8 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a7a      	ldr	r2, [pc, #488]	; (80021b8 <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	4b78      	ldr	r3, [pc, #480]	; (80021b8 <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a77      	ldr	r2, [pc, #476]	; (80021b8 <HAL_RCC_OscConfig+0x26c>)
 8001fdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	e01d      	b.n	8002020 <HAL_RCC_OscConfig+0xd4>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fec:	d10c      	bne.n	8002008 <HAL_RCC_OscConfig+0xbc>
 8001fee:	4b72      	ldr	r3, [pc, #456]	; (80021b8 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a71      	ldr	r2, [pc, #452]	; (80021b8 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	4b6f      	ldr	r3, [pc, #444]	; (80021b8 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a6e      	ldr	r2, [pc, #440]	; (80021b8 <HAL_RCC_OscConfig+0x26c>)
 8002000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002004:	6013      	str	r3, [r2, #0]
 8002006:	e00b      	b.n	8002020 <HAL_RCC_OscConfig+0xd4>
 8002008:	4b6b      	ldr	r3, [pc, #428]	; (80021b8 <HAL_RCC_OscConfig+0x26c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a6a      	ldr	r2, [pc, #424]	; (80021b8 <HAL_RCC_OscConfig+0x26c>)
 800200e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002012:	6013      	str	r3, [r2, #0]
 8002014:	4b68      	ldr	r3, [pc, #416]	; (80021b8 <HAL_RCC_OscConfig+0x26c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a67      	ldr	r2, [pc, #412]	; (80021b8 <HAL_RCC_OscConfig+0x26c>)
 800201a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800201e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d013      	beq.n	8002050 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002028:	f7ff f850 	bl	80010cc <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002030:	f7ff f84c 	bl	80010cc <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b64      	cmp	r3, #100	; 0x64
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e200      	b.n	8002444 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002042:	4b5d      	ldr	r3, [pc, #372]	; (80021b8 <HAL_RCC_OscConfig+0x26c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d0f0      	beq.n	8002030 <HAL_RCC_OscConfig+0xe4>
 800204e:	e014      	b.n	800207a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002050:	f7ff f83c 	bl	80010cc <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002058:	f7ff f838 	bl	80010cc <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b64      	cmp	r3, #100	; 0x64
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e1ec      	b.n	8002444 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800206a:	4b53      	ldr	r3, [pc, #332]	; (80021b8 <HAL_RCC_OscConfig+0x26c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f0      	bne.n	8002058 <HAL_RCC_OscConfig+0x10c>
 8002076:	e000      	b.n	800207a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002078:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d063      	beq.n	800214e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002086:	4b4c      	ldr	r3, [pc, #304]	; (80021b8 <HAL_RCC_OscConfig+0x26c>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f003 030c 	and.w	r3, r3, #12
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00b      	beq.n	80020aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002092:	4b49      	ldr	r3, [pc, #292]	; (80021b8 <HAL_RCC_OscConfig+0x26c>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f003 030c 	and.w	r3, r3, #12
 800209a:	2b08      	cmp	r3, #8
 800209c:	d11c      	bne.n	80020d8 <HAL_RCC_OscConfig+0x18c>
 800209e:	4b46      	ldr	r3, [pc, #280]	; (80021b8 <HAL_RCC_OscConfig+0x26c>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d116      	bne.n	80020d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020aa:	4b43      	ldr	r3, [pc, #268]	; (80021b8 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d005      	beq.n	80020c2 <HAL_RCC_OscConfig+0x176>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d001      	beq.n	80020c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e1c0      	b.n	8002444 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c2:	4b3d      	ldr	r3, [pc, #244]	; (80021b8 <HAL_RCC_OscConfig+0x26c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	4939      	ldr	r1, [pc, #228]	; (80021b8 <HAL_RCC_OscConfig+0x26c>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020d6:	e03a      	b.n	800214e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d020      	beq.n	8002122 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020e0:	4b36      	ldr	r3, [pc, #216]	; (80021bc <HAL_RCC_OscConfig+0x270>)
 80020e2:	2201      	movs	r2, #1
 80020e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e6:	f7fe fff1 	bl	80010cc <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ee:	f7fe ffed 	bl	80010cc <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e1a1      	b.n	8002444 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002100:	4b2d      	ldr	r3, [pc, #180]	; (80021b8 <HAL_RCC_OscConfig+0x26c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0f0      	beq.n	80020ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210c:	4b2a      	ldr	r3, [pc, #168]	; (80021b8 <HAL_RCC_OscConfig+0x26c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	4927      	ldr	r1, [pc, #156]	; (80021b8 <HAL_RCC_OscConfig+0x26c>)
 800211c:	4313      	orrs	r3, r2
 800211e:	600b      	str	r3, [r1, #0]
 8002120:	e015      	b.n	800214e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002122:	4b26      	ldr	r3, [pc, #152]	; (80021bc <HAL_RCC_OscConfig+0x270>)
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002128:	f7fe ffd0 	bl	80010cc <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002130:	f7fe ffcc 	bl	80010cc <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e180      	b.n	8002444 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002142:	4b1d      	ldr	r3, [pc, #116]	; (80021b8 <HAL_RCC_OscConfig+0x26c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1f0      	bne.n	8002130 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0308 	and.w	r3, r3, #8
 8002156:	2b00      	cmp	r3, #0
 8002158:	d03a      	beq.n	80021d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d019      	beq.n	8002196 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002162:	4b17      	ldr	r3, [pc, #92]	; (80021c0 <HAL_RCC_OscConfig+0x274>)
 8002164:	2201      	movs	r2, #1
 8002166:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002168:	f7fe ffb0 	bl	80010cc <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002170:	f7fe ffac 	bl	80010cc <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e160      	b.n	8002444 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002182:	4b0d      	ldr	r3, [pc, #52]	; (80021b8 <HAL_RCC_OscConfig+0x26c>)
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0f0      	beq.n	8002170 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800218e:	2001      	movs	r0, #1
 8002190:	f000 fac4 	bl	800271c <RCC_Delay>
 8002194:	e01c      	b.n	80021d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002196:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <HAL_RCC_OscConfig+0x274>)
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800219c:	f7fe ff96 	bl	80010cc <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a2:	e00f      	b.n	80021c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021a4:	f7fe ff92 	bl	80010cc <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d908      	bls.n	80021c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e146      	b.n	8002444 <HAL_RCC_OscConfig+0x4f8>
 80021b6:	bf00      	nop
 80021b8:	40021000 	.word	0x40021000
 80021bc:	42420000 	.word	0x42420000
 80021c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c4:	4b92      	ldr	r3, [pc, #584]	; (8002410 <HAL_RCC_OscConfig+0x4c4>)
 80021c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1e9      	bne.n	80021a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 80a6 	beq.w	800232a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021de:	2300      	movs	r3, #0
 80021e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021e2:	4b8b      	ldr	r3, [pc, #556]	; (8002410 <HAL_RCC_OscConfig+0x4c4>)
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10d      	bne.n	800220a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ee:	4b88      	ldr	r3, [pc, #544]	; (8002410 <HAL_RCC_OscConfig+0x4c4>)
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	4a87      	ldr	r2, [pc, #540]	; (8002410 <HAL_RCC_OscConfig+0x4c4>)
 80021f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f8:	61d3      	str	r3, [r2, #28]
 80021fa:	4b85      	ldr	r3, [pc, #532]	; (8002410 <HAL_RCC_OscConfig+0x4c4>)
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002202:	60bb      	str	r3, [r7, #8]
 8002204:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002206:	2301      	movs	r3, #1
 8002208:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800220a:	4b82      	ldr	r3, [pc, #520]	; (8002414 <HAL_RCC_OscConfig+0x4c8>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002212:	2b00      	cmp	r3, #0
 8002214:	d118      	bne.n	8002248 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002216:	4b7f      	ldr	r3, [pc, #508]	; (8002414 <HAL_RCC_OscConfig+0x4c8>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a7e      	ldr	r2, [pc, #504]	; (8002414 <HAL_RCC_OscConfig+0x4c8>)
 800221c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002220:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002222:	f7fe ff53 	bl	80010cc <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800222a:	f7fe ff4f 	bl	80010cc <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b64      	cmp	r3, #100	; 0x64
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e103      	b.n	8002444 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800223c:	4b75      	ldr	r3, [pc, #468]	; (8002414 <HAL_RCC_OscConfig+0x4c8>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0f0      	beq.n	800222a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d106      	bne.n	800225e <HAL_RCC_OscConfig+0x312>
 8002250:	4b6f      	ldr	r3, [pc, #444]	; (8002410 <HAL_RCC_OscConfig+0x4c4>)
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	4a6e      	ldr	r2, [pc, #440]	; (8002410 <HAL_RCC_OscConfig+0x4c4>)
 8002256:	f043 0301 	orr.w	r3, r3, #1
 800225a:	6213      	str	r3, [r2, #32]
 800225c:	e02d      	b.n	80022ba <HAL_RCC_OscConfig+0x36e>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10c      	bne.n	8002280 <HAL_RCC_OscConfig+0x334>
 8002266:	4b6a      	ldr	r3, [pc, #424]	; (8002410 <HAL_RCC_OscConfig+0x4c4>)
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	4a69      	ldr	r2, [pc, #420]	; (8002410 <HAL_RCC_OscConfig+0x4c4>)
 800226c:	f023 0301 	bic.w	r3, r3, #1
 8002270:	6213      	str	r3, [r2, #32]
 8002272:	4b67      	ldr	r3, [pc, #412]	; (8002410 <HAL_RCC_OscConfig+0x4c4>)
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	4a66      	ldr	r2, [pc, #408]	; (8002410 <HAL_RCC_OscConfig+0x4c4>)
 8002278:	f023 0304 	bic.w	r3, r3, #4
 800227c:	6213      	str	r3, [r2, #32]
 800227e:	e01c      	b.n	80022ba <HAL_RCC_OscConfig+0x36e>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	2b05      	cmp	r3, #5
 8002286:	d10c      	bne.n	80022a2 <HAL_RCC_OscConfig+0x356>
 8002288:	4b61      	ldr	r3, [pc, #388]	; (8002410 <HAL_RCC_OscConfig+0x4c4>)
 800228a:	6a1b      	ldr	r3, [r3, #32]
 800228c:	4a60      	ldr	r2, [pc, #384]	; (8002410 <HAL_RCC_OscConfig+0x4c4>)
 800228e:	f043 0304 	orr.w	r3, r3, #4
 8002292:	6213      	str	r3, [r2, #32]
 8002294:	4b5e      	ldr	r3, [pc, #376]	; (8002410 <HAL_RCC_OscConfig+0x4c4>)
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	4a5d      	ldr	r2, [pc, #372]	; (8002410 <HAL_RCC_OscConfig+0x4c4>)
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	6213      	str	r3, [r2, #32]
 80022a0:	e00b      	b.n	80022ba <HAL_RCC_OscConfig+0x36e>
 80022a2:	4b5b      	ldr	r3, [pc, #364]	; (8002410 <HAL_RCC_OscConfig+0x4c4>)
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	4a5a      	ldr	r2, [pc, #360]	; (8002410 <HAL_RCC_OscConfig+0x4c4>)
 80022a8:	f023 0301 	bic.w	r3, r3, #1
 80022ac:	6213      	str	r3, [r2, #32]
 80022ae:	4b58      	ldr	r3, [pc, #352]	; (8002410 <HAL_RCC_OscConfig+0x4c4>)
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	4a57      	ldr	r2, [pc, #348]	; (8002410 <HAL_RCC_OscConfig+0x4c4>)
 80022b4:	f023 0304 	bic.w	r3, r3, #4
 80022b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d015      	beq.n	80022ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c2:	f7fe ff03 	bl	80010cc <HAL_GetTick>
 80022c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022c8:	e00a      	b.n	80022e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ca:	f7fe feff 	bl	80010cc <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d8:	4293      	cmp	r3, r2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e0b1      	b.n	8002444 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e0:	4b4b      	ldr	r3, [pc, #300]	; (8002410 <HAL_RCC_OscConfig+0x4c4>)
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0ee      	beq.n	80022ca <HAL_RCC_OscConfig+0x37e>
 80022ec:	e014      	b.n	8002318 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ee:	f7fe feed 	bl	80010cc <HAL_GetTick>
 80022f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022f4:	e00a      	b.n	800230c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f6:	f7fe fee9 	bl	80010cc <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	f241 3288 	movw	r2, #5000	; 0x1388
 8002304:	4293      	cmp	r3, r2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e09b      	b.n	8002444 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800230c:	4b40      	ldr	r3, [pc, #256]	; (8002410 <HAL_RCC_OscConfig+0x4c4>)
 800230e:	6a1b      	ldr	r3, [r3, #32]
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d1ee      	bne.n	80022f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002318:	7dfb      	ldrb	r3, [r7, #23]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d105      	bne.n	800232a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800231e:	4b3c      	ldr	r3, [pc, #240]	; (8002410 <HAL_RCC_OscConfig+0x4c4>)
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	4a3b      	ldr	r2, [pc, #236]	; (8002410 <HAL_RCC_OscConfig+0x4c4>)
 8002324:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002328:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	2b00      	cmp	r3, #0
 8002330:	f000 8087 	beq.w	8002442 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002334:	4b36      	ldr	r3, [pc, #216]	; (8002410 <HAL_RCC_OscConfig+0x4c4>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 030c 	and.w	r3, r3, #12
 800233c:	2b08      	cmp	r3, #8
 800233e:	d061      	beq.n	8002404 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	69db      	ldr	r3, [r3, #28]
 8002344:	2b02      	cmp	r3, #2
 8002346:	d146      	bne.n	80023d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002348:	4b33      	ldr	r3, [pc, #204]	; (8002418 <HAL_RCC_OscConfig+0x4cc>)
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234e:	f7fe febd 	bl	80010cc <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002356:	f7fe feb9 	bl	80010cc <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e06d      	b.n	8002444 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002368:	4b29      	ldr	r3, [pc, #164]	; (8002410 <HAL_RCC_OscConfig+0x4c4>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1f0      	bne.n	8002356 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a1b      	ldr	r3, [r3, #32]
 8002378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800237c:	d108      	bne.n	8002390 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800237e:	4b24      	ldr	r3, [pc, #144]	; (8002410 <HAL_RCC_OscConfig+0x4c4>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	4921      	ldr	r1, [pc, #132]	; (8002410 <HAL_RCC_OscConfig+0x4c4>)
 800238c:	4313      	orrs	r3, r2
 800238e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002390:	4b1f      	ldr	r3, [pc, #124]	; (8002410 <HAL_RCC_OscConfig+0x4c4>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a19      	ldr	r1, [r3, #32]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a0:	430b      	orrs	r3, r1
 80023a2:	491b      	ldr	r1, [pc, #108]	; (8002410 <HAL_RCC_OscConfig+0x4c4>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023a8:	4b1b      	ldr	r3, [pc, #108]	; (8002418 <HAL_RCC_OscConfig+0x4cc>)
 80023aa:	2201      	movs	r2, #1
 80023ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ae:	f7fe fe8d 	bl	80010cc <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b6:	f7fe fe89 	bl	80010cc <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e03d      	b.n	8002444 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023c8:	4b11      	ldr	r3, [pc, #68]	; (8002410 <HAL_RCC_OscConfig+0x4c4>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0f0      	beq.n	80023b6 <HAL_RCC_OscConfig+0x46a>
 80023d4:	e035      	b.n	8002442 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d6:	4b10      	ldr	r3, [pc, #64]	; (8002418 <HAL_RCC_OscConfig+0x4cc>)
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023dc:	f7fe fe76 	bl	80010cc <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023e4:	f7fe fe72 	bl	80010cc <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e026      	b.n	8002444 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f6:	4b06      	ldr	r3, [pc, #24]	; (8002410 <HAL_RCC_OscConfig+0x4c4>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1f0      	bne.n	80023e4 <HAL_RCC_OscConfig+0x498>
 8002402:	e01e      	b.n	8002442 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69db      	ldr	r3, [r3, #28]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d107      	bne.n	800241c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e019      	b.n	8002444 <HAL_RCC_OscConfig+0x4f8>
 8002410:	40021000 	.word	0x40021000
 8002414:	40007000 	.word	0x40007000
 8002418:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800241c:	4b0b      	ldr	r3, [pc, #44]	; (800244c <HAL_RCC_OscConfig+0x500>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	429a      	cmp	r2, r3
 800242e:	d106      	bne.n	800243e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800243a:	429a      	cmp	r2, r3
 800243c:	d001      	beq.n	8002442 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e000      	b.n	8002444 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3718      	adds	r7, #24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40021000 	.word	0x40021000

08002450 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e0d0      	b.n	8002606 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002464:	4b6a      	ldr	r3, [pc, #424]	; (8002610 <HAL_RCC_ClockConfig+0x1c0>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	429a      	cmp	r2, r3
 8002470:	d910      	bls.n	8002494 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002472:	4b67      	ldr	r3, [pc, #412]	; (8002610 <HAL_RCC_ClockConfig+0x1c0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f023 0207 	bic.w	r2, r3, #7
 800247a:	4965      	ldr	r1, [pc, #404]	; (8002610 <HAL_RCC_ClockConfig+0x1c0>)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	4313      	orrs	r3, r2
 8002480:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002482:	4b63      	ldr	r3, [pc, #396]	; (8002610 <HAL_RCC_ClockConfig+0x1c0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	429a      	cmp	r2, r3
 800248e:	d001      	beq.n	8002494 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e0b8      	b.n	8002606 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d020      	beq.n	80024e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d005      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024ac:	4b59      	ldr	r3, [pc, #356]	; (8002614 <HAL_RCC_ClockConfig+0x1c4>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	4a58      	ldr	r2, [pc, #352]	; (8002614 <HAL_RCC_ClockConfig+0x1c4>)
 80024b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0308 	and.w	r3, r3, #8
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d005      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024c4:	4b53      	ldr	r3, [pc, #332]	; (8002614 <HAL_RCC_ClockConfig+0x1c4>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	4a52      	ldr	r2, [pc, #328]	; (8002614 <HAL_RCC_ClockConfig+0x1c4>)
 80024ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024d0:	4b50      	ldr	r3, [pc, #320]	; (8002614 <HAL_RCC_ClockConfig+0x1c4>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	494d      	ldr	r1, [pc, #308]	; (8002614 <HAL_RCC_ClockConfig+0x1c4>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d040      	beq.n	8002570 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d107      	bne.n	8002506 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f6:	4b47      	ldr	r3, [pc, #284]	; (8002614 <HAL_RCC_ClockConfig+0x1c4>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d115      	bne.n	800252e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e07f      	b.n	8002606 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b02      	cmp	r3, #2
 800250c:	d107      	bne.n	800251e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800250e:	4b41      	ldr	r3, [pc, #260]	; (8002614 <HAL_RCC_ClockConfig+0x1c4>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d109      	bne.n	800252e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e073      	b.n	8002606 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251e:	4b3d      	ldr	r3, [pc, #244]	; (8002614 <HAL_RCC_ClockConfig+0x1c4>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e06b      	b.n	8002606 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800252e:	4b39      	ldr	r3, [pc, #228]	; (8002614 <HAL_RCC_ClockConfig+0x1c4>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f023 0203 	bic.w	r2, r3, #3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	4936      	ldr	r1, [pc, #216]	; (8002614 <HAL_RCC_ClockConfig+0x1c4>)
 800253c:	4313      	orrs	r3, r2
 800253e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002540:	f7fe fdc4 	bl	80010cc <HAL_GetTick>
 8002544:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002546:	e00a      	b.n	800255e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002548:	f7fe fdc0 	bl	80010cc <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	f241 3288 	movw	r2, #5000	; 0x1388
 8002556:	4293      	cmp	r3, r2
 8002558:	d901      	bls.n	800255e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e053      	b.n	8002606 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255e:	4b2d      	ldr	r3, [pc, #180]	; (8002614 <HAL_RCC_ClockConfig+0x1c4>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f003 020c 	and.w	r2, r3, #12
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	429a      	cmp	r2, r3
 800256e:	d1eb      	bne.n	8002548 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002570:	4b27      	ldr	r3, [pc, #156]	; (8002610 <HAL_RCC_ClockConfig+0x1c0>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d210      	bcs.n	80025a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800257e:	4b24      	ldr	r3, [pc, #144]	; (8002610 <HAL_RCC_ClockConfig+0x1c0>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f023 0207 	bic.w	r2, r3, #7
 8002586:	4922      	ldr	r1, [pc, #136]	; (8002610 <HAL_RCC_ClockConfig+0x1c0>)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	4313      	orrs	r3, r2
 800258c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800258e:	4b20      	ldr	r3, [pc, #128]	; (8002610 <HAL_RCC_ClockConfig+0x1c0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	429a      	cmp	r2, r3
 800259a:	d001      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e032      	b.n	8002606 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0304 	and.w	r3, r3, #4
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d008      	beq.n	80025be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025ac:	4b19      	ldr	r3, [pc, #100]	; (8002614 <HAL_RCC_ClockConfig+0x1c4>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	4916      	ldr	r1, [pc, #88]	; (8002614 <HAL_RCC_ClockConfig+0x1c4>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d009      	beq.n	80025de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025ca:	4b12      	ldr	r3, [pc, #72]	; (8002614 <HAL_RCC_ClockConfig+0x1c4>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	490e      	ldr	r1, [pc, #56]	; (8002614 <HAL_RCC_ClockConfig+0x1c4>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025de:	f000 f821 	bl	8002624 <HAL_RCC_GetSysClockFreq>
 80025e2:	4602      	mov	r2, r0
 80025e4:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <HAL_RCC_ClockConfig+0x1c4>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	091b      	lsrs	r3, r3, #4
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	490a      	ldr	r1, [pc, #40]	; (8002618 <HAL_RCC_ClockConfig+0x1c8>)
 80025f0:	5ccb      	ldrb	r3, [r1, r3]
 80025f2:	fa22 f303 	lsr.w	r3, r2, r3
 80025f6:	4a09      	ldr	r2, [pc, #36]	; (800261c <HAL_RCC_ClockConfig+0x1cc>)
 80025f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025fa:	4b09      	ldr	r3, [pc, #36]	; (8002620 <HAL_RCC_ClockConfig+0x1d0>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fe fd22 	bl	8001048 <HAL_InitTick>

  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40022000 	.word	0x40022000
 8002614:	40021000 	.word	0x40021000
 8002618:	08003bcc 	.word	0x08003bcc
 800261c:	20000004 	.word	0x20000004
 8002620:	20000008 	.word	0x20000008

08002624 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002624:	b490      	push	{r4, r7}
 8002626:	b08a      	sub	sp, #40	; 0x28
 8002628:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800262a:	4b29      	ldr	r3, [pc, #164]	; (80026d0 <HAL_RCC_GetSysClockFreq+0xac>)
 800262c:	1d3c      	adds	r4, r7, #4
 800262e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002630:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002634:	f240 2301 	movw	r3, #513	; 0x201
 8002638:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800263a:	2300      	movs	r3, #0
 800263c:	61fb      	str	r3, [r7, #28]
 800263e:	2300      	movs	r3, #0
 8002640:	61bb      	str	r3, [r7, #24]
 8002642:	2300      	movs	r3, #0
 8002644:	627b      	str	r3, [r7, #36]	; 0x24
 8002646:	2300      	movs	r3, #0
 8002648:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800264a:	2300      	movs	r3, #0
 800264c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800264e:	4b21      	ldr	r3, [pc, #132]	; (80026d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	f003 030c 	and.w	r3, r3, #12
 800265a:	2b04      	cmp	r3, #4
 800265c:	d002      	beq.n	8002664 <HAL_RCC_GetSysClockFreq+0x40>
 800265e:	2b08      	cmp	r3, #8
 8002660:	d003      	beq.n	800266a <HAL_RCC_GetSysClockFreq+0x46>
 8002662:	e02b      	b.n	80026bc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002664:	4b1c      	ldr	r3, [pc, #112]	; (80026d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002666:	623b      	str	r3, [r7, #32]
      break;
 8002668:	e02b      	b.n	80026c2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	0c9b      	lsrs	r3, r3, #18
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	3328      	adds	r3, #40	; 0x28
 8002674:	443b      	add	r3, r7
 8002676:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800267a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d012      	beq.n	80026ac <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002686:	4b13      	ldr	r3, [pc, #76]	; (80026d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	0c5b      	lsrs	r3, r3, #17
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	3328      	adds	r3, #40	; 0x28
 8002692:	443b      	add	r3, r7
 8002694:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002698:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	4a0e      	ldr	r2, [pc, #56]	; (80026d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800269e:	fb03 f202 	mul.w	r2, r3, r2
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a8:	627b      	str	r3, [r7, #36]	; 0x24
 80026aa:	e004      	b.n	80026b6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	4a0b      	ldr	r2, [pc, #44]	; (80026dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80026b0:	fb02 f303 	mul.w	r3, r2, r3
 80026b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	623b      	str	r3, [r7, #32]
      break;
 80026ba:	e002      	b.n	80026c2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026bc:	4b06      	ldr	r3, [pc, #24]	; (80026d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80026be:	623b      	str	r3, [r7, #32]
      break;
 80026c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026c2:	6a3b      	ldr	r3, [r7, #32]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3728      	adds	r7, #40	; 0x28
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc90      	pop	{r4, r7}
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	08003bac 	.word	0x08003bac
 80026d4:	40021000 	.word	0x40021000
 80026d8:	007a1200 	.word	0x007a1200
 80026dc:	003d0900 	.word	0x003d0900

080026e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026e4:	4b02      	ldr	r3, [pc, #8]	; (80026f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80026e6:	681b      	ldr	r3, [r3, #0]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr
 80026f0:	20000004 	.word	0x20000004

080026f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026f8:	f7ff fff2 	bl	80026e0 <HAL_RCC_GetHCLKFreq>
 80026fc:	4602      	mov	r2, r0
 80026fe:	4b05      	ldr	r3, [pc, #20]	; (8002714 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	0adb      	lsrs	r3, r3, #11
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	4903      	ldr	r1, [pc, #12]	; (8002718 <HAL_RCC_GetPCLK2Freq+0x24>)
 800270a:	5ccb      	ldrb	r3, [r1, r3]
 800270c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002710:	4618      	mov	r0, r3
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40021000 	.word	0x40021000
 8002718:	08003bdc 	.word	0x08003bdc

0800271c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002724:	4b0a      	ldr	r3, [pc, #40]	; (8002750 <RCC_Delay+0x34>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a0a      	ldr	r2, [pc, #40]	; (8002754 <RCC_Delay+0x38>)
 800272a:	fba2 2303 	umull	r2, r3, r2, r3
 800272e:	0a5b      	lsrs	r3, r3, #9
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	fb02 f303 	mul.w	r3, r2, r3
 8002736:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002738:	bf00      	nop
  }
  while (Delay --);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	1e5a      	subs	r2, r3, #1
 800273e:	60fa      	str	r2, [r7, #12]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1f9      	bne.n	8002738 <RCC_Delay+0x1c>
}
 8002744:	bf00      	nop
 8002746:	bf00      	nop
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr
 8002750:	20000004 	.word	0x20000004
 8002754:	10624dd3 	.word	0x10624dd3

08002758 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002760:	2300      	movs	r3, #0
 8002762:	613b      	str	r3, [r7, #16]
 8002764:	2300      	movs	r3, #0
 8002766:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b00      	cmp	r3, #0
 8002772:	d07d      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002774:	2300      	movs	r3, #0
 8002776:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002778:	4b4f      	ldr	r3, [pc, #316]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d10d      	bne.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002784:	4b4c      	ldr	r3, [pc, #304]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002786:	69db      	ldr	r3, [r3, #28]
 8002788:	4a4b      	ldr	r2, [pc, #300]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800278a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800278e:	61d3      	str	r3, [r2, #28]
 8002790:	4b49      	ldr	r3, [pc, #292]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002792:	69db      	ldr	r3, [r3, #28]
 8002794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002798:	60bb      	str	r3, [r7, #8]
 800279a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800279c:	2301      	movs	r3, #1
 800279e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a0:	4b46      	ldr	r3, [pc, #280]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d118      	bne.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ac:	4b43      	ldr	r3, [pc, #268]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a42      	ldr	r2, [pc, #264]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027b8:	f7fe fc88 	bl	80010cc <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027be:	e008      	b.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c0:	f7fe fc84 	bl	80010cc <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b64      	cmp	r3, #100	; 0x64
 80027cc:	d901      	bls.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e06d      	b.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d2:	4b3a      	ldr	r3, [pc, #232]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0f0      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027de:	4b36      	ldr	r3, [pc, #216]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027e6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d02e      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d027      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027fc:	4b2e      	ldr	r3, [pc, #184]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002804:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002806:	4b2e      	ldr	r3, [pc, #184]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002808:	2201      	movs	r2, #1
 800280a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800280c:	4b2c      	ldr	r3, [pc, #176]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800280e:	2200      	movs	r2, #0
 8002810:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002812:	4a29      	ldr	r2, [pc, #164]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d014      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002822:	f7fe fc53 	bl	80010cc <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002828:	e00a      	b.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800282a:	f7fe fc4f 	bl	80010cc <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	f241 3288 	movw	r2, #5000	; 0x1388
 8002838:	4293      	cmp	r3, r2
 800283a:	d901      	bls.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e036      	b.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002840:	4b1d      	ldr	r3, [pc, #116]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0ee      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800284c:	4b1a      	ldr	r3, [pc, #104]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	4917      	ldr	r1, [pc, #92]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800285a:	4313      	orrs	r3, r2
 800285c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800285e:	7dfb      	ldrb	r3, [r7, #23]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d105      	bne.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002864:	4b14      	ldr	r3, [pc, #80]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002866:	69db      	ldr	r3, [r3, #28]
 8002868:	4a13      	ldr	r2, [pc, #76]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800286a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800286e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d008      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800287c:	4b0e      	ldr	r3, [pc, #56]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	490b      	ldr	r1, [pc, #44]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800288a:	4313      	orrs	r3, r2
 800288c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0310 	and.w	r3, r3, #16
 8002896:	2b00      	cmp	r3, #0
 8002898:	d008      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800289a:	4b07      	ldr	r3, [pc, #28]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	4904      	ldr	r1, [pc, #16]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40007000 	.word	0x40007000
 80028c0:	42420440 	.word	0x42420440

080028c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80028c4:	b590      	push	{r4, r7, lr}
 80028c6:	b08d      	sub	sp, #52	; 0x34
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028cc:	4b58      	ldr	r3, [pc, #352]	; (8002a30 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 80028ce:	f107 040c 	add.w	r4, r7, #12
 80028d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028d8:	f240 2301 	movw	r3, #513	; 0x201
 80028dc:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80028de:	2300      	movs	r3, #0
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
 80028e2:	2300      	movs	r3, #0
 80028e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028e6:	2300      	movs	r3, #0
 80028e8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80028ea:	2300      	movs	r3, #0
 80028ec:	61fb      	str	r3, [r7, #28]
 80028ee:	2300      	movs	r3, #0
 80028f0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b10      	cmp	r3, #16
 80028f6:	d00a      	beq.n	800290e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b10      	cmp	r3, #16
 80028fc:	f200 808e 	bhi.w	8002a1c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d049      	beq.n	800299a <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2b02      	cmp	r3, #2
 800290a:	d079      	beq.n	8002a00 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800290c:	e086      	b.n	8002a1c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 800290e:	4b49      	ldr	r3, [pc, #292]	; (8002a34 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002914:	4b47      	ldr	r3, [pc, #284]	; (8002a34 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d07f      	beq.n	8002a20 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	0c9b      	lsrs	r3, r3, #18
 8002924:	f003 030f 	and.w	r3, r3, #15
 8002928:	3330      	adds	r3, #48	; 0x30
 800292a:	443b      	add	r3, r7
 800292c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002930:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d017      	beq.n	800296c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800293c:	4b3d      	ldr	r3, [pc, #244]	; (8002a34 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	0c5b      	lsrs	r3, r3, #17
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	3330      	adds	r3, #48	; 0x30
 8002948:	443b      	add	r3, r7
 800294a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800294e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00d      	beq.n	8002976 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800295a:	4a37      	ldr	r2, [pc, #220]	; (8002a38 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002962:	6a3b      	ldr	r3, [r7, #32]
 8002964:	fb02 f303 	mul.w	r3, r2, r3
 8002968:	62fb      	str	r3, [r7, #44]	; 0x2c
 800296a:	e004      	b.n	8002976 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	4a33      	ldr	r2, [pc, #204]	; (8002a3c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002970:	fb02 f303 	mul.w	r3, r2, r3
 8002974:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002976:	4b2f      	ldr	r3, [pc, #188]	; (8002a34 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800297e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002982:	d102      	bne.n	800298a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8002984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002986:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002988:	e04a      	b.n	8002a20 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 800298a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	4a2c      	ldr	r2, [pc, #176]	; (8002a40 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002990:	fba2 2303 	umull	r2, r3, r2, r3
 8002994:	085b      	lsrs	r3, r3, #1
 8002996:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002998:	e042      	b.n	8002a20 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 800299a:	4b26      	ldr	r3, [pc, #152]	; (8002a34 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029aa:	d108      	bne.n	80029be <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 80029b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80029bc:	e01f      	b.n	80029fe <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029c8:	d109      	bne.n	80029de <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 80029ca:	4b1a      	ldr	r3, [pc, #104]	; (8002a34 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 80029d6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80029da:	62bb      	str	r3, [r7, #40]	; 0x28
 80029dc:	e00f      	b.n	80029fe <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029e8:	d11c      	bne.n	8002a24 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80029ea:	4b12      	ldr	r3, [pc, #72]	; (8002a34 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d016      	beq.n	8002a24 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 80029f6:	f24f 4324 	movw	r3, #62500	; 0xf424
 80029fa:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80029fc:	e012      	b.n	8002a24 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80029fe:	e011      	b.n	8002a24 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002a00:	f7ff fe78 	bl	80026f4 <HAL_RCC_GetPCLK2Freq>
 8002a04:	4602      	mov	r2, r0
 8002a06:	4b0b      	ldr	r3, [pc, #44]	; (8002a34 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	0b9b      	lsrs	r3, r3, #14
 8002a0c:	f003 0303 	and.w	r3, r3, #3
 8002a10:	3301      	adds	r3, #1
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a18:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002a1a:	e004      	b.n	8002a26 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002a1c:	bf00      	nop
 8002a1e:	e002      	b.n	8002a26 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002a20:	bf00      	nop
 8002a22:	e000      	b.n	8002a26 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8002a24:	bf00      	nop
    }
  }
  return (frequency);
 8002a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3734      	adds	r7, #52	; 0x34
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd90      	pop	{r4, r7, pc}
 8002a30:	08003bbc 	.word	0x08003bbc
 8002a34:	40021000 	.word	0x40021000
 8002a38:	007a1200 	.word	0x007a1200
 8002a3c:	003d0900 	.word	0x003d0900
 8002a40:	aaaaaaab 	.word	0xaaaaaaab

08002a44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e041      	b.n	8002ada <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d106      	bne.n	8002a70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7fe fa18 	bl	8000ea0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2202      	movs	r2, #2
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3304      	adds	r3, #4
 8002a80:	4619      	mov	r1, r3
 8002a82:	4610      	mov	r0, r2
 8002a84:	f000 fa6a 	bl	8002f5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d001      	beq.n	8002afc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e035      	b.n	8002b68 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2202      	movs	r2, #2
 8002b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68da      	ldr	r2, [r3, #12]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 0201 	orr.w	r2, r2, #1
 8002b12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a16      	ldr	r2, [pc, #88]	; (8002b74 <HAL_TIM_Base_Start_IT+0x90>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d009      	beq.n	8002b32 <HAL_TIM_Base_Start_IT+0x4e>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b26:	d004      	beq.n	8002b32 <HAL_TIM_Base_Start_IT+0x4e>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a12      	ldr	r2, [pc, #72]	; (8002b78 <HAL_TIM_Base_Start_IT+0x94>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d111      	bne.n	8002b56 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2b06      	cmp	r3, #6
 8002b42:	d010      	beq.n	8002b66 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f042 0201 	orr.w	r2, r2, #1
 8002b52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b54:	e007      	b.n	8002b66 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f042 0201 	orr.w	r2, r2, #1
 8002b64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3714      	adds	r7, #20
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bc80      	pop	{r7}
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	40012c00 	.word	0x40012c00
 8002b78:	40000400 	.word	0x40000400

08002b7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d122      	bne.n	8002bd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d11b      	bne.n	8002bd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f06f 0202 	mvn.w	r2, #2
 8002ba8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	f003 0303 	and.w	r3, r3, #3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d003      	beq.n	8002bc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f9b1 	bl	8002f26 <HAL_TIM_IC_CaptureCallback>
 8002bc4:	e005      	b.n	8002bd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 f9a4 	bl	8002f14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 f9b3 	bl	8002f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	f003 0304 	and.w	r3, r3, #4
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d122      	bne.n	8002c2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b04      	cmp	r3, #4
 8002bf2:	d11b      	bne.n	8002c2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f06f 0204 	mvn.w	r2, #4
 8002bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2202      	movs	r2, #2
 8002c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f987 	bl	8002f26 <HAL_TIM_IC_CaptureCallback>
 8002c18:	e005      	b.n	8002c26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f97a 	bl	8002f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 f989 	bl	8002f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b08      	cmp	r3, #8
 8002c38:	d122      	bne.n	8002c80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	f003 0308 	and.w	r3, r3, #8
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d11b      	bne.n	8002c80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f06f 0208 	mvn.w	r2, #8
 8002c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2204      	movs	r2, #4
 8002c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f95d 	bl	8002f26 <HAL_TIM_IC_CaptureCallback>
 8002c6c:	e005      	b.n	8002c7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f950 	bl	8002f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 f95f 	bl	8002f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	f003 0310 	and.w	r3, r3, #16
 8002c8a:	2b10      	cmp	r3, #16
 8002c8c:	d122      	bne.n	8002cd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f003 0310 	and.w	r3, r3, #16
 8002c98:	2b10      	cmp	r3, #16
 8002c9a:	d11b      	bne.n	8002cd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f06f 0210 	mvn.w	r2, #16
 8002ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2208      	movs	r2, #8
 8002caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d003      	beq.n	8002cc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f933 	bl	8002f26 <HAL_TIM_IC_CaptureCallback>
 8002cc0:	e005      	b.n	8002cce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f926 	bl	8002f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f935 	bl	8002f38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	f003 0301 	and.w	r3, r3, #1
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d10e      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d107      	bne.n	8002d00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f06f 0201 	mvn.w	r2, #1
 8002cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7fd fd7a 	bl	80007f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0a:	2b80      	cmp	r3, #128	; 0x80
 8002d0c:	d10e      	bne.n	8002d2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d18:	2b80      	cmp	r3, #128	; 0x80
 8002d1a:	d107      	bne.n	8002d2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 fa67 	bl	80031fa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d36:	2b40      	cmp	r3, #64	; 0x40
 8002d38:	d10e      	bne.n	8002d58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d44:	2b40      	cmp	r3, #64	; 0x40
 8002d46:	d107      	bne.n	8002d58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f8f9 	bl	8002f4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	f003 0320 	and.w	r3, r3, #32
 8002d62:	2b20      	cmp	r3, #32
 8002d64:	d10e      	bne.n	8002d84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	f003 0320 	and.w	r3, r3, #32
 8002d70:	2b20      	cmp	r3, #32
 8002d72:	d107      	bne.n	8002d84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f06f 0220 	mvn.w	r2, #32
 8002d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 fa32 	bl	80031e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d84:	bf00      	nop
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d101      	bne.n	8002da4 <HAL_TIM_ConfigClockSource+0x18>
 8002da0:	2302      	movs	r3, #2
 8002da2:	e0b3      	b.n	8002f0c <HAL_TIM_ConfigClockSource+0x180>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2202      	movs	r2, #2
 8002db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002dc2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ddc:	d03e      	beq.n	8002e5c <HAL_TIM_ConfigClockSource+0xd0>
 8002dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002de2:	f200 8087 	bhi.w	8002ef4 <HAL_TIM_ConfigClockSource+0x168>
 8002de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dea:	f000 8085 	beq.w	8002ef8 <HAL_TIM_ConfigClockSource+0x16c>
 8002dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002df2:	d87f      	bhi.n	8002ef4 <HAL_TIM_ConfigClockSource+0x168>
 8002df4:	2b70      	cmp	r3, #112	; 0x70
 8002df6:	d01a      	beq.n	8002e2e <HAL_TIM_ConfigClockSource+0xa2>
 8002df8:	2b70      	cmp	r3, #112	; 0x70
 8002dfa:	d87b      	bhi.n	8002ef4 <HAL_TIM_ConfigClockSource+0x168>
 8002dfc:	2b60      	cmp	r3, #96	; 0x60
 8002dfe:	d050      	beq.n	8002ea2 <HAL_TIM_ConfigClockSource+0x116>
 8002e00:	2b60      	cmp	r3, #96	; 0x60
 8002e02:	d877      	bhi.n	8002ef4 <HAL_TIM_ConfigClockSource+0x168>
 8002e04:	2b50      	cmp	r3, #80	; 0x50
 8002e06:	d03c      	beq.n	8002e82 <HAL_TIM_ConfigClockSource+0xf6>
 8002e08:	2b50      	cmp	r3, #80	; 0x50
 8002e0a:	d873      	bhi.n	8002ef4 <HAL_TIM_ConfigClockSource+0x168>
 8002e0c:	2b40      	cmp	r3, #64	; 0x40
 8002e0e:	d058      	beq.n	8002ec2 <HAL_TIM_ConfigClockSource+0x136>
 8002e10:	2b40      	cmp	r3, #64	; 0x40
 8002e12:	d86f      	bhi.n	8002ef4 <HAL_TIM_ConfigClockSource+0x168>
 8002e14:	2b30      	cmp	r3, #48	; 0x30
 8002e16:	d064      	beq.n	8002ee2 <HAL_TIM_ConfigClockSource+0x156>
 8002e18:	2b30      	cmp	r3, #48	; 0x30
 8002e1a:	d86b      	bhi.n	8002ef4 <HAL_TIM_ConfigClockSource+0x168>
 8002e1c:	2b20      	cmp	r3, #32
 8002e1e:	d060      	beq.n	8002ee2 <HAL_TIM_ConfigClockSource+0x156>
 8002e20:	2b20      	cmp	r3, #32
 8002e22:	d867      	bhi.n	8002ef4 <HAL_TIM_ConfigClockSource+0x168>
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d05c      	beq.n	8002ee2 <HAL_TIM_ConfigClockSource+0x156>
 8002e28:	2b10      	cmp	r3, #16
 8002e2a:	d05a      	beq.n	8002ee2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002e2c:	e062      	b.n	8002ef4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6818      	ldr	r0, [r3, #0]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	6899      	ldr	r1, [r3, #8]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685a      	ldr	r2, [r3, #4]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	f000 f95c 	bl	80030fa <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e50:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	609a      	str	r2, [r3, #8]
      break;
 8002e5a:	e04e      	b.n	8002efa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6818      	ldr	r0, [r3, #0]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	6899      	ldr	r1, [r3, #8]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f000 f945 	bl	80030fa <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	689a      	ldr	r2, [r3, #8]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e7e:	609a      	str	r2, [r3, #8]
      break;
 8002e80:	e03b      	b.n	8002efa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6818      	ldr	r0, [r3, #0]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	6859      	ldr	r1, [r3, #4]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	f000 f8bc 	bl	800300c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2150      	movs	r1, #80	; 0x50
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 f913 	bl	80030c6 <TIM_ITRx_SetConfig>
      break;
 8002ea0:	e02b      	b.n	8002efa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6818      	ldr	r0, [r3, #0]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	6859      	ldr	r1, [r3, #4]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	f000 f8da 	bl	8003068 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2160      	movs	r1, #96	; 0x60
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 f903 	bl	80030c6 <TIM_ITRx_SetConfig>
      break;
 8002ec0:	e01b      	b.n	8002efa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6818      	ldr	r0, [r3, #0]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	6859      	ldr	r1, [r3, #4]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	f000 f89c 	bl	800300c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2140      	movs	r1, #64	; 0x40
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 f8f3 	bl	80030c6 <TIM_ITRx_SetConfig>
      break;
 8002ee0:	e00b      	b.n	8002efa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4619      	mov	r1, r3
 8002eec:	4610      	mov	r0, r2
 8002eee:	f000 f8ea 	bl	80030c6 <TIM_ITRx_SetConfig>
        break;
 8002ef2:	e002      	b.n	8002efa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ef4:	bf00      	nop
 8002ef6:	e000      	b.n	8002efa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ef8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3710      	adds	r7, #16
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc80      	pop	{r7}
 8002f24:	4770      	bx	lr

08002f26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b083      	sub	sp, #12
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bc80      	pop	{r7}
 8002f36:	4770      	bx	lr

08002f38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bc80      	pop	{r7}
 8002f48:	4770      	bx	lr

08002f4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr

08002f5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a25      	ldr	r2, [pc, #148]	; (8003004 <TIM_Base_SetConfig+0xa8>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d007      	beq.n	8002f84 <TIM_Base_SetConfig+0x28>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f7a:	d003      	beq.n	8002f84 <TIM_Base_SetConfig+0x28>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a22      	ldr	r2, [pc, #136]	; (8003008 <TIM_Base_SetConfig+0xac>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d108      	bne.n	8002f96 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a1a      	ldr	r2, [pc, #104]	; (8003004 <TIM_Base_SetConfig+0xa8>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d007      	beq.n	8002fae <TIM_Base_SetConfig+0x52>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa4:	d003      	beq.n	8002fae <TIM_Base_SetConfig+0x52>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a17      	ldr	r2, [pc, #92]	; (8003008 <TIM_Base_SetConfig+0xac>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d108      	bne.n	8002fc0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a07      	ldr	r2, [pc, #28]	; (8003004 <TIM_Base_SetConfig+0xa8>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d103      	bne.n	8002ff4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	691a      	ldr	r2, [r3, #16]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	615a      	str	r2, [r3, #20]
}
 8002ffa:	bf00      	nop
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr
 8003004:	40012c00 	.word	0x40012c00
 8003008:	40000400 	.word	0x40000400

0800300c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800300c:	b480      	push	{r7}
 800300e:	b087      	sub	sp, #28
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	f023 0201 	bic.w	r2, r3, #1
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003036:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	011b      	lsls	r3, r3, #4
 800303c:	693a      	ldr	r2, [r7, #16]
 800303e:	4313      	orrs	r3, r2
 8003040:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	f023 030a 	bic.w	r3, r3, #10
 8003048:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800304a:	697a      	ldr	r2, [r7, #20]
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	4313      	orrs	r3, r2
 8003050:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	621a      	str	r2, [r3, #32]
}
 800305e:	bf00      	nop
 8003060:	371c      	adds	r7, #28
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr

08003068 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003068:	b480      	push	{r7}
 800306a:	b087      	sub	sp, #28
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	f023 0210 	bic.w	r2, r3, #16
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003092:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	031b      	lsls	r3, r3, #12
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	4313      	orrs	r3, r2
 800309c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80030a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	011b      	lsls	r3, r3, #4
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	4313      	orrs	r3, r2
 80030ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	621a      	str	r2, [r3, #32]
}
 80030bc:	bf00      	nop
 80030be:	371c      	adds	r7, #28
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bc80      	pop	{r7}
 80030c4:	4770      	bx	lr

080030c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030c6:	b480      	push	{r7}
 80030c8:	b085      	sub	sp, #20
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
 80030ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	f043 0307 	orr.w	r3, r3, #7
 80030e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	609a      	str	r2, [r3, #8]
}
 80030f0:	bf00      	nop
 80030f2:	3714      	adds	r7, #20
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bc80      	pop	{r7}
 80030f8:	4770      	bx	lr

080030fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b087      	sub	sp, #28
 80030fe:	af00      	add	r7, sp, #0
 8003100:	60f8      	str	r0, [r7, #12]
 8003102:	60b9      	str	r1, [r7, #8]
 8003104:	607a      	str	r2, [r7, #4]
 8003106:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003114:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	021a      	lsls	r2, r3, #8
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	431a      	orrs	r2, r3
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	4313      	orrs	r3, r2
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	4313      	orrs	r3, r2
 8003126:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	697a      	ldr	r2, [r7, #20]
 800312c:	609a      	str	r2, [r3, #8]
}
 800312e:	bf00      	nop
 8003130:	371c      	adds	r7, #28
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr

08003138 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003148:	2b01      	cmp	r3, #1
 800314a:	d101      	bne.n	8003150 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800314c:	2302      	movs	r3, #2
 800314e:	e041      	b.n	80031d4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2202      	movs	r2, #2
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003176:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	4313      	orrs	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a14      	ldr	r2, [pc, #80]	; (80031e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d009      	beq.n	80031a8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800319c:	d004      	beq.n	80031a8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a10      	ldr	r2, [pc, #64]	; (80031e4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d10c      	bne.n	80031c2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	68ba      	ldr	r2, [r7, #8]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3714      	adds	r7, #20
 80031d8:	46bd      	mov	sp, r7
 80031da:	bc80      	pop	{r7}
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	40012c00 	.word	0x40012c00
 80031e4:	40000400 	.word	0x40000400

080031e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bc80      	pop	{r7}
 80031f8:	4770      	bx	lr

080031fa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr

0800320c <__errno>:
 800320c:	4b01      	ldr	r3, [pc, #4]	; (8003214 <__errno+0x8>)
 800320e:	6818      	ldr	r0, [r3, #0]
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	20000010 	.word	0x20000010

08003218 <__libc_init_array>:
 8003218:	b570      	push	{r4, r5, r6, lr}
 800321a:	2600      	movs	r6, #0
 800321c:	4d0c      	ldr	r5, [pc, #48]	; (8003250 <__libc_init_array+0x38>)
 800321e:	4c0d      	ldr	r4, [pc, #52]	; (8003254 <__libc_init_array+0x3c>)
 8003220:	1b64      	subs	r4, r4, r5
 8003222:	10a4      	asrs	r4, r4, #2
 8003224:	42a6      	cmp	r6, r4
 8003226:	d109      	bne.n	800323c <__libc_init_array+0x24>
 8003228:	f000 fc9c 	bl	8003b64 <_init>
 800322c:	2600      	movs	r6, #0
 800322e:	4d0a      	ldr	r5, [pc, #40]	; (8003258 <__libc_init_array+0x40>)
 8003230:	4c0a      	ldr	r4, [pc, #40]	; (800325c <__libc_init_array+0x44>)
 8003232:	1b64      	subs	r4, r4, r5
 8003234:	10a4      	asrs	r4, r4, #2
 8003236:	42a6      	cmp	r6, r4
 8003238:	d105      	bne.n	8003246 <__libc_init_array+0x2e>
 800323a:	bd70      	pop	{r4, r5, r6, pc}
 800323c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003240:	4798      	blx	r3
 8003242:	3601      	adds	r6, #1
 8003244:	e7ee      	b.n	8003224 <__libc_init_array+0xc>
 8003246:	f855 3b04 	ldr.w	r3, [r5], #4
 800324a:	4798      	blx	r3
 800324c:	3601      	adds	r6, #1
 800324e:	e7f2      	b.n	8003236 <__libc_init_array+0x1e>
 8003250:	08003c18 	.word	0x08003c18
 8003254:	08003c18 	.word	0x08003c18
 8003258:	08003c18 	.word	0x08003c18
 800325c:	08003c1c 	.word	0x08003c1c

08003260 <memset>:
 8003260:	4603      	mov	r3, r0
 8003262:	4402      	add	r2, r0
 8003264:	4293      	cmp	r3, r2
 8003266:	d100      	bne.n	800326a <memset+0xa>
 8003268:	4770      	bx	lr
 800326a:	f803 1b01 	strb.w	r1, [r3], #1
 800326e:	e7f9      	b.n	8003264 <memset+0x4>

08003270 <siprintf>:
 8003270:	b40e      	push	{r1, r2, r3}
 8003272:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003276:	b500      	push	{lr}
 8003278:	b09c      	sub	sp, #112	; 0x70
 800327a:	ab1d      	add	r3, sp, #116	; 0x74
 800327c:	9002      	str	r0, [sp, #8]
 800327e:	9006      	str	r0, [sp, #24]
 8003280:	9107      	str	r1, [sp, #28]
 8003282:	9104      	str	r1, [sp, #16]
 8003284:	4808      	ldr	r0, [pc, #32]	; (80032a8 <siprintf+0x38>)
 8003286:	4909      	ldr	r1, [pc, #36]	; (80032ac <siprintf+0x3c>)
 8003288:	f853 2b04 	ldr.w	r2, [r3], #4
 800328c:	9105      	str	r1, [sp, #20]
 800328e:	6800      	ldr	r0, [r0, #0]
 8003290:	a902      	add	r1, sp, #8
 8003292:	9301      	str	r3, [sp, #4]
 8003294:	f000 f868 	bl	8003368 <_svfiprintf_r>
 8003298:	2200      	movs	r2, #0
 800329a:	9b02      	ldr	r3, [sp, #8]
 800329c:	701a      	strb	r2, [r3, #0]
 800329e:	b01c      	add	sp, #112	; 0x70
 80032a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80032a4:	b003      	add	sp, #12
 80032a6:	4770      	bx	lr
 80032a8:	20000010 	.word	0x20000010
 80032ac:	ffff0208 	.word	0xffff0208

080032b0 <__ssputs_r>:
 80032b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032b4:	688e      	ldr	r6, [r1, #8]
 80032b6:	4682      	mov	sl, r0
 80032b8:	429e      	cmp	r6, r3
 80032ba:	460c      	mov	r4, r1
 80032bc:	4690      	mov	r8, r2
 80032be:	461f      	mov	r7, r3
 80032c0:	d838      	bhi.n	8003334 <__ssputs_r+0x84>
 80032c2:	898a      	ldrh	r2, [r1, #12]
 80032c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80032c8:	d032      	beq.n	8003330 <__ssputs_r+0x80>
 80032ca:	6825      	ldr	r5, [r4, #0]
 80032cc:	6909      	ldr	r1, [r1, #16]
 80032ce:	3301      	adds	r3, #1
 80032d0:	eba5 0901 	sub.w	r9, r5, r1
 80032d4:	6965      	ldr	r5, [r4, #20]
 80032d6:	444b      	add	r3, r9
 80032d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80032dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80032e0:	106d      	asrs	r5, r5, #1
 80032e2:	429d      	cmp	r5, r3
 80032e4:	bf38      	it	cc
 80032e6:	461d      	movcc	r5, r3
 80032e8:	0553      	lsls	r3, r2, #21
 80032ea:	d531      	bpl.n	8003350 <__ssputs_r+0xa0>
 80032ec:	4629      	mov	r1, r5
 80032ee:	f000 fb6f 	bl	80039d0 <_malloc_r>
 80032f2:	4606      	mov	r6, r0
 80032f4:	b950      	cbnz	r0, 800330c <__ssputs_r+0x5c>
 80032f6:	230c      	movs	r3, #12
 80032f8:	f04f 30ff 	mov.w	r0, #4294967295
 80032fc:	f8ca 3000 	str.w	r3, [sl]
 8003300:	89a3      	ldrh	r3, [r4, #12]
 8003302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003306:	81a3      	strh	r3, [r4, #12]
 8003308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800330c:	464a      	mov	r2, r9
 800330e:	6921      	ldr	r1, [r4, #16]
 8003310:	f000 face 	bl	80038b0 <memcpy>
 8003314:	89a3      	ldrh	r3, [r4, #12]
 8003316:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800331a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800331e:	81a3      	strh	r3, [r4, #12]
 8003320:	6126      	str	r6, [r4, #16]
 8003322:	444e      	add	r6, r9
 8003324:	6026      	str	r6, [r4, #0]
 8003326:	463e      	mov	r6, r7
 8003328:	6165      	str	r5, [r4, #20]
 800332a:	eba5 0509 	sub.w	r5, r5, r9
 800332e:	60a5      	str	r5, [r4, #8]
 8003330:	42be      	cmp	r6, r7
 8003332:	d900      	bls.n	8003336 <__ssputs_r+0x86>
 8003334:	463e      	mov	r6, r7
 8003336:	4632      	mov	r2, r6
 8003338:	4641      	mov	r1, r8
 800333a:	6820      	ldr	r0, [r4, #0]
 800333c:	f000 fac6 	bl	80038cc <memmove>
 8003340:	68a3      	ldr	r3, [r4, #8]
 8003342:	2000      	movs	r0, #0
 8003344:	1b9b      	subs	r3, r3, r6
 8003346:	60a3      	str	r3, [r4, #8]
 8003348:	6823      	ldr	r3, [r4, #0]
 800334a:	4433      	add	r3, r6
 800334c:	6023      	str	r3, [r4, #0]
 800334e:	e7db      	b.n	8003308 <__ssputs_r+0x58>
 8003350:	462a      	mov	r2, r5
 8003352:	f000 fbb1 	bl	8003ab8 <_realloc_r>
 8003356:	4606      	mov	r6, r0
 8003358:	2800      	cmp	r0, #0
 800335a:	d1e1      	bne.n	8003320 <__ssputs_r+0x70>
 800335c:	4650      	mov	r0, sl
 800335e:	6921      	ldr	r1, [r4, #16]
 8003360:	f000 face 	bl	8003900 <_free_r>
 8003364:	e7c7      	b.n	80032f6 <__ssputs_r+0x46>
	...

08003368 <_svfiprintf_r>:
 8003368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800336c:	4698      	mov	r8, r3
 800336e:	898b      	ldrh	r3, [r1, #12]
 8003370:	4607      	mov	r7, r0
 8003372:	061b      	lsls	r3, r3, #24
 8003374:	460d      	mov	r5, r1
 8003376:	4614      	mov	r4, r2
 8003378:	b09d      	sub	sp, #116	; 0x74
 800337a:	d50e      	bpl.n	800339a <_svfiprintf_r+0x32>
 800337c:	690b      	ldr	r3, [r1, #16]
 800337e:	b963      	cbnz	r3, 800339a <_svfiprintf_r+0x32>
 8003380:	2140      	movs	r1, #64	; 0x40
 8003382:	f000 fb25 	bl	80039d0 <_malloc_r>
 8003386:	6028      	str	r0, [r5, #0]
 8003388:	6128      	str	r0, [r5, #16]
 800338a:	b920      	cbnz	r0, 8003396 <_svfiprintf_r+0x2e>
 800338c:	230c      	movs	r3, #12
 800338e:	603b      	str	r3, [r7, #0]
 8003390:	f04f 30ff 	mov.w	r0, #4294967295
 8003394:	e0d1      	b.n	800353a <_svfiprintf_r+0x1d2>
 8003396:	2340      	movs	r3, #64	; 0x40
 8003398:	616b      	str	r3, [r5, #20]
 800339a:	2300      	movs	r3, #0
 800339c:	9309      	str	r3, [sp, #36]	; 0x24
 800339e:	2320      	movs	r3, #32
 80033a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80033a4:	2330      	movs	r3, #48	; 0x30
 80033a6:	f04f 0901 	mov.w	r9, #1
 80033aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80033ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003554 <_svfiprintf_r+0x1ec>
 80033b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80033b6:	4623      	mov	r3, r4
 80033b8:	469a      	mov	sl, r3
 80033ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80033be:	b10a      	cbz	r2, 80033c4 <_svfiprintf_r+0x5c>
 80033c0:	2a25      	cmp	r2, #37	; 0x25
 80033c2:	d1f9      	bne.n	80033b8 <_svfiprintf_r+0x50>
 80033c4:	ebba 0b04 	subs.w	fp, sl, r4
 80033c8:	d00b      	beq.n	80033e2 <_svfiprintf_r+0x7a>
 80033ca:	465b      	mov	r3, fp
 80033cc:	4622      	mov	r2, r4
 80033ce:	4629      	mov	r1, r5
 80033d0:	4638      	mov	r0, r7
 80033d2:	f7ff ff6d 	bl	80032b0 <__ssputs_r>
 80033d6:	3001      	adds	r0, #1
 80033d8:	f000 80aa 	beq.w	8003530 <_svfiprintf_r+0x1c8>
 80033dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80033de:	445a      	add	r2, fp
 80033e0:	9209      	str	r2, [sp, #36]	; 0x24
 80033e2:	f89a 3000 	ldrb.w	r3, [sl]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 80a2 	beq.w	8003530 <_svfiprintf_r+0x1c8>
 80033ec:	2300      	movs	r3, #0
 80033ee:	f04f 32ff 	mov.w	r2, #4294967295
 80033f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033f6:	f10a 0a01 	add.w	sl, sl, #1
 80033fa:	9304      	str	r3, [sp, #16]
 80033fc:	9307      	str	r3, [sp, #28]
 80033fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003402:	931a      	str	r3, [sp, #104]	; 0x68
 8003404:	4654      	mov	r4, sl
 8003406:	2205      	movs	r2, #5
 8003408:	f814 1b01 	ldrb.w	r1, [r4], #1
 800340c:	4851      	ldr	r0, [pc, #324]	; (8003554 <_svfiprintf_r+0x1ec>)
 800340e:	f000 fa41 	bl	8003894 <memchr>
 8003412:	9a04      	ldr	r2, [sp, #16]
 8003414:	b9d8      	cbnz	r0, 800344e <_svfiprintf_r+0xe6>
 8003416:	06d0      	lsls	r0, r2, #27
 8003418:	bf44      	itt	mi
 800341a:	2320      	movmi	r3, #32
 800341c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003420:	0711      	lsls	r1, r2, #28
 8003422:	bf44      	itt	mi
 8003424:	232b      	movmi	r3, #43	; 0x2b
 8003426:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800342a:	f89a 3000 	ldrb.w	r3, [sl]
 800342e:	2b2a      	cmp	r3, #42	; 0x2a
 8003430:	d015      	beq.n	800345e <_svfiprintf_r+0xf6>
 8003432:	4654      	mov	r4, sl
 8003434:	2000      	movs	r0, #0
 8003436:	f04f 0c0a 	mov.w	ip, #10
 800343a:	9a07      	ldr	r2, [sp, #28]
 800343c:	4621      	mov	r1, r4
 800343e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003442:	3b30      	subs	r3, #48	; 0x30
 8003444:	2b09      	cmp	r3, #9
 8003446:	d94e      	bls.n	80034e6 <_svfiprintf_r+0x17e>
 8003448:	b1b0      	cbz	r0, 8003478 <_svfiprintf_r+0x110>
 800344a:	9207      	str	r2, [sp, #28]
 800344c:	e014      	b.n	8003478 <_svfiprintf_r+0x110>
 800344e:	eba0 0308 	sub.w	r3, r0, r8
 8003452:	fa09 f303 	lsl.w	r3, r9, r3
 8003456:	4313      	orrs	r3, r2
 8003458:	46a2      	mov	sl, r4
 800345a:	9304      	str	r3, [sp, #16]
 800345c:	e7d2      	b.n	8003404 <_svfiprintf_r+0x9c>
 800345e:	9b03      	ldr	r3, [sp, #12]
 8003460:	1d19      	adds	r1, r3, #4
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	9103      	str	r1, [sp, #12]
 8003466:	2b00      	cmp	r3, #0
 8003468:	bfbb      	ittet	lt
 800346a:	425b      	neglt	r3, r3
 800346c:	f042 0202 	orrlt.w	r2, r2, #2
 8003470:	9307      	strge	r3, [sp, #28]
 8003472:	9307      	strlt	r3, [sp, #28]
 8003474:	bfb8      	it	lt
 8003476:	9204      	strlt	r2, [sp, #16]
 8003478:	7823      	ldrb	r3, [r4, #0]
 800347a:	2b2e      	cmp	r3, #46	; 0x2e
 800347c:	d10c      	bne.n	8003498 <_svfiprintf_r+0x130>
 800347e:	7863      	ldrb	r3, [r4, #1]
 8003480:	2b2a      	cmp	r3, #42	; 0x2a
 8003482:	d135      	bne.n	80034f0 <_svfiprintf_r+0x188>
 8003484:	9b03      	ldr	r3, [sp, #12]
 8003486:	3402      	adds	r4, #2
 8003488:	1d1a      	adds	r2, r3, #4
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	9203      	str	r2, [sp, #12]
 800348e:	2b00      	cmp	r3, #0
 8003490:	bfb8      	it	lt
 8003492:	f04f 33ff 	movlt.w	r3, #4294967295
 8003496:	9305      	str	r3, [sp, #20]
 8003498:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003558 <_svfiprintf_r+0x1f0>
 800349c:	2203      	movs	r2, #3
 800349e:	4650      	mov	r0, sl
 80034a0:	7821      	ldrb	r1, [r4, #0]
 80034a2:	f000 f9f7 	bl	8003894 <memchr>
 80034a6:	b140      	cbz	r0, 80034ba <_svfiprintf_r+0x152>
 80034a8:	2340      	movs	r3, #64	; 0x40
 80034aa:	eba0 000a 	sub.w	r0, r0, sl
 80034ae:	fa03 f000 	lsl.w	r0, r3, r0
 80034b2:	9b04      	ldr	r3, [sp, #16]
 80034b4:	3401      	adds	r4, #1
 80034b6:	4303      	orrs	r3, r0
 80034b8:	9304      	str	r3, [sp, #16]
 80034ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034be:	2206      	movs	r2, #6
 80034c0:	4826      	ldr	r0, [pc, #152]	; (800355c <_svfiprintf_r+0x1f4>)
 80034c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80034c6:	f000 f9e5 	bl	8003894 <memchr>
 80034ca:	2800      	cmp	r0, #0
 80034cc:	d038      	beq.n	8003540 <_svfiprintf_r+0x1d8>
 80034ce:	4b24      	ldr	r3, [pc, #144]	; (8003560 <_svfiprintf_r+0x1f8>)
 80034d0:	bb1b      	cbnz	r3, 800351a <_svfiprintf_r+0x1b2>
 80034d2:	9b03      	ldr	r3, [sp, #12]
 80034d4:	3307      	adds	r3, #7
 80034d6:	f023 0307 	bic.w	r3, r3, #7
 80034da:	3308      	adds	r3, #8
 80034dc:	9303      	str	r3, [sp, #12]
 80034de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034e0:	4433      	add	r3, r6
 80034e2:	9309      	str	r3, [sp, #36]	; 0x24
 80034e4:	e767      	b.n	80033b6 <_svfiprintf_r+0x4e>
 80034e6:	460c      	mov	r4, r1
 80034e8:	2001      	movs	r0, #1
 80034ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80034ee:	e7a5      	b.n	800343c <_svfiprintf_r+0xd4>
 80034f0:	2300      	movs	r3, #0
 80034f2:	f04f 0c0a 	mov.w	ip, #10
 80034f6:	4619      	mov	r1, r3
 80034f8:	3401      	adds	r4, #1
 80034fa:	9305      	str	r3, [sp, #20]
 80034fc:	4620      	mov	r0, r4
 80034fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003502:	3a30      	subs	r2, #48	; 0x30
 8003504:	2a09      	cmp	r2, #9
 8003506:	d903      	bls.n	8003510 <_svfiprintf_r+0x1a8>
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0c5      	beq.n	8003498 <_svfiprintf_r+0x130>
 800350c:	9105      	str	r1, [sp, #20]
 800350e:	e7c3      	b.n	8003498 <_svfiprintf_r+0x130>
 8003510:	4604      	mov	r4, r0
 8003512:	2301      	movs	r3, #1
 8003514:	fb0c 2101 	mla	r1, ip, r1, r2
 8003518:	e7f0      	b.n	80034fc <_svfiprintf_r+0x194>
 800351a:	ab03      	add	r3, sp, #12
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	462a      	mov	r2, r5
 8003520:	4638      	mov	r0, r7
 8003522:	4b10      	ldr	r3, [pc, #64]	; (8003564 <_svfiprintf_r+0x1fc>)
 8003524:	a904      	add	r1, sp, #16
 8003526:	f3af 8000 	nop.w
 800352a:	1c42      	adds	r2, r0, #1
 800352c:	4606      	mov	r6, r0
 800352e:	d1d6      	bne.n	80034de <_svfiprintf_r+0x176>
 8003530:	89ab      	ldrh	r3, [r5, #12]
 8003532:	065b      	lsls	r3, r3, #25
 8003534:	f53f af2c 	bmi.w	8003390 <_svfiprintf_r+0x28>
 8003538:	9809      	ldr	r0, [sp, #36]	; 0x24
 800353a:	b01d      	add	sp, #116	; 0x74
 800353c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003540:	ab03      	add	r3, sp, #12
 8003542:	9300      	str	r3, [sp, #0]
 8003544:	462a      	mov	r2, r5
 8003546:	4638      	mov	r0, r7
 8003548:	4b06      	ldr	r3, [pc, #24]	; (8003564 <_svfiprintf_r+0x1fc>)
 800354a:	a904      	add	r1, sp, #16
 800354c:	f000 f87c 	bl	8003648 <_printf_i>
 8003550:	e7eb      	b.n	800352a <_svfiprintf_r+0x1c2>
 8003552:	bf00      	nop
 8003554:	08003be4 	.word	0x08003be4
 8003558:	08003bea 	.word	0x08003bea
 800355c:	08003bee 	.word	0x08003bee
 8003560:	00000000 	.word	0x00000000
 8003564:	080032b1 	.word	0x080032b1

08003568 <_printf_common>:
 8003568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800356c:	4616      	mov	r6, r2
 800356e:	4699      	mov	r9, r3
 8003570:	688a      	ldr	r2, [r1, #8]
 8003572:	690b      	ldr	r3, [r1, #16]
 8003574:	4607      	mov	r7, r0
 8003576:	4293      	cmp	r3, r2
 8003578:	bfb8      	it	lt
 800357a:	4613      	movlt	r3, r2
 800357c:	6033      	str	r3, [r6, #0]
 800357e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003582:	460c      	mov	r4, r1
 8003584:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003588:	b10a      	cbz	r2, 800358e <_printf_common+0x26>
 800358a:	3301      	adds	r3, #1
 800358c:	6033      	str	r3, [r6, #0]
 800358e:	6823      	ldr	r3, [r4, #0]
 8003590:	0699      	lsls	r1, r3, #26
 8003592:	bf42      	ittt	mi
 8003594:	6833      	ldrmi	r3, [r6, #0]
 8003596:	3302      	addmi	r3, #2
 8003598:	6033      	strmi	r3, [r6, #0]
 800359a:	6825      	ldr	r5, [r4, #0]
 800359c:	f015 0506 	ands.w	r5, r5, #6
 80035a0:	d106      	bne.n	80035b0 <_printf_common+0x48>
 80035a2:	f104 0a19 	add.w	sl, r4, #25
 80035a6:	68e3      	ldr	r3, [r4, #12]
 80035a8:	6832      	ldr	r2, [r6, #0]
 80035aa:	1a9b      	subs	r3, r3, r2
 80035ac:	42ab      	cmp	r3, r5
 80035ae:	dc28      	bgt.n	8003602 <_printf_common+0x9a>
 80035b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80035b4:	1e13      	subs	r3, r2, #0
 80035b6:	6822      	ldr	r2, [r4, #0]
 80035b8:	bf18      	it	ne
 80035ba:	2301      	movne	r3, #1
 80035bc:	0692      	lsls	r2, r2, #26
 80035be:	d42d      	bmi.n	800361c <_printf_common+0xb4>
 80035c0:	4649      	mov	r1, r9
 80035c2:	4638      	mov	r0, r7
 80035c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035c8:	47c0      	blx	r8
 80035ca:	3001      	adds	r0, #1
 80035cc:	d020      	beq.n	8003610 <_printf_common+0xa8>
 80035ce:	6823      	ldr	r3, [r4, #0]
 80035d0:	68e5      	ldr	r5, [r4, #12]
 80035d2:	f003 0306 	and.w	r3, r3, #6
 80035d6:	2b04      	cmp	r3, #4
 80035d8:	bf18      	it	ne
 80035da:	2500      	movne	r5, #0
 80035dc:	6832      	ldr	r2, [r6, #0]
 80035de:	f04f 0600 	mov.w	r6, #0
 80035e2:	68a3      	ldr	r3, [r4, #8]
 80035e4:	bf08      	it	eq
 80035e6:	1aad      	subeq	r5, r5, r2
 80035e8:	6922      	ldr	r2, [r4, #16]
 80035ea:	bf08      	it	eq
 80035ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035f0:	4293      	cmp	r3, r2
 80035f2:	bfc4      	itt	gt
 80035f4:	1a9b      	subgt	r3, r3, r2
 80035f6:	18ed      	addgt	r5, r5, r3
 80035f8:	341a      	adds	r4, #26
 80035fa:	42b5      	cmp	r5, r6
 80035fc:	d11a      	bne.n	8003634 <_printf_common+0xcc>
 80035fe:	2000      	movs	r0, #0
 8003600:	e008      	b.n	8003614 <_printf_common+0xac>
 8003602:	2301      	movs	r3, #1
 8003604:	4652      	mov	r2, sl
 8003606:	4649      	mov	r1, r9
 8003608:	4638      	mov	r0, r7
 800360a:	47c0      	blx	r8
 800360c:	3001      	adds	r0, #1
 800360e:	d103      	bne.n	8003618 <_printf_common+0xb0>
 8003610:	f04f 30ff 	mov.w	r0, #4294967295
 8003614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003618:	3501      	adds	r5, #1
 800361a:	e7c4      	b.n	80035a6 <_printf_common+0x3e>
 800361c:	2030      	movs	r0, #48	; 0x30
 800361e:	18e1      	adds	r1, r4, r3
 8003620:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003624:	1c5a      	adds	r2, r3, #1
 8003626:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800362a:	4422      	add	r2, r4
 800362c:	3302      	adds	r3, #2
 800362e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003632:	e7c5      	b.n	80035c0 <_printf_common+0x58>
 8003634:	2301      	movs	r3, #1
 8003636:	4622      	mov	r2, r4
 8003638:	4649      	mov	r1, r9
 800363a:	4638      	mov	r0, r7
 800363c:	47c0      	blx	r8
 800363e:	3001      	adds	r0, #1
 8003640:	d0e6      	beq.n	8003610 <_printf_common+0xa8>
 8003642:	3601      	adds	r6, #1
 8003644:	e7d9      	b.n	80035fa <_printf_common+0x92>
	...

08003648 <_printf_i>:
 8003648:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800364c:	7e0f      	ldrb	r7, [r1, #24]
 800364e:	4691      	mov	r9, r2
 8003650:	2f78      	cmp	r7, #120	; 0x78
 8003652:	4680      	mov	r8, r0
 8003654:	460c      	mov	r4, r1
 8003656:	469a      	mov	sl, r3
 8003658:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800365a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800365e:	d807      	bhi.n	8003670 <_printf_i+0x28>
 8003660:	2f62      	cmp	r7, #98	; 0x62
 8003662:	d80a      	bhi.n	800367a <_printf_i+0x32>
 8003664:	2f00      	cmp	r7, #0
 8003666:	f000 80d9 	beq.w	800381c <_printf_i+0x1d4>
 800366a:	2f58      	cmp	r7, #88	; 0x58
 800366c:	f000 80a4 	beq.w	80037b8 <_printf_i+0x170>
 8003670:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003674:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003678:	e03a      	b.n	80036f0 <_printf_i+0xa8>
 800367a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800367e:	2b15      	cmp	r3, #21
 8003680:	d8f6      	bhi.n	8003670 <_printf_i+0x28>
 8003682:	a101      	add	r1, pc, #4	; (adr r1, 8003688 <_printf_i+0x40>)
 8003684:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003688:	080036e1 	.word	0x080036e1
 800368c:	080036f5 	.word	0x080036f5
 8003690:	08003671 	.word	0x08003671
 8003694:	08003671 	.word	0x08003671
 8003698:	08003671 	.word	0x08003671
 800369c:	08003671 	.word	0x08003671
 80036a0:	080036f5 	.word	0x080036f5
 80036a4:	08003671 	.word	0x08003671
 80036a8:	08003671 	.word	0x08003671
 80036ac:	08003671 	.word	0x08003671
 80036b0:	08003671 	.word	0x08003671
 80036b4:	08003803 	.word	0x08003803
 80036b8:	08003725 	.word	0x08003725
 80036bc:	080037e5 	.word	0x080037e5
 80036c0:	08003671 	.word	0x08003671
 80036c4:	08003671 	.word	0x08003671
 80036c8:	08003825 	.word	0x08003825
 80036cc:	08003671 	.word	0x08003671
 80036d0:	08003725 	.word	0x08003725
 80036d4:	08003671 	.word	0x08003671
 80036d8:	08003671 	.word	0x08003671
 80036dc:	080037ed 	.word	0x080037ed
 80036e0:	682b      	ldr	r3, [r5, #0]
 80036e2:	1d1a      	adds	r2, r3, #4
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	602a      	str	r2, [r5, #0]
 80036e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036f0:	2301      	movs	r3, #1
 80036f2:	e0a4      	b.n	800383e <_printf_i+0x1f6>
 80036f4:	6820      	ldr	r0, [r4, #0]
 80036f6:	6829      	ldr	r1, [r5, #0]
 80036f8:	0606      	lsls	r6, r0, #24
 80036fa:	f101 0304 	add.w	r3, r1, #4
 80036fe:	d50a      	bpl.n	8003716 <_printf_i+0xce>
 8003700:	680e      	ldr	r6, [r1, #0]
 8003702:	602b      	str	r3, [r5, #0]
 8003704:	2e00      	cmp	r6, #0
 8003706:	da03      	bge.n	8003710 <_printf_i+0xc8>
 8003708:	232d      	movs	r3, #45	; 0x2d
 800370a:	4276      	negs	r6, r6
 800370c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003710:	230a      	movs	r3, #10
 8003712:	485e      	ldr	r0, [pc, #376]	; (800388c <_printf_i+0x244>)
 8003714:	e019      	b.n	800374a <_printf_i+0x102>
 8003716:	680e      	ldr	r6, [r1, #0]
 8003718:	f010 0f40 	tst.w	r0, #64	; 0x40
 800371c:	602b      	str	r3, [r5, #0]
 800371e:	bf18      	it	ne
 8003720:	b236      	sxthne	r6, r6
 8003722:	e7ef      	b.n	8003704 <_printf_i+0xbc>
 8003724:	682b      	ldr	r3, [r5, #0]
 8003726:	6820      	ldr	r0, [r4, #0]
 8003728:	1d19      	adds	r1, r3, #4
 800372a:	6029      	str	r1, [r5, #0]
 800372c:	0601      	lsls	r1, r0, #24
 800372e:	d501      	bpl.n	8003734 <_printf_i+0xec>
 8003730:	681e      	ldr	r6, [r3, #0]
 8003732:	e002      	b.n	800373a <_printf_i+0xf2>
 8003734:	0646      	lsls	r6, r0, #25
 8003736:	d5fb      	bpl.n	8003730 <_printf_i+0xe8>
 8003738:	881e      	ldrh	r6, [r3, #0]
 800373a:	2f6f      	cmp	r7, #111	; 0x6f
 800373c:	bf0c      	ite	eq
 800373e:	2308      	moveq	r3, #8
 8003740:	230a      	movne	r3, #10
 8003742:	4852      	ldr	r0, [pc, #328]	; (800388c <_printf_i+0x244>)
 8003744:	2100      	movs	r1, #0
 8003746:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800374a:	6865      	ldr	r5, [r4, #4]
 800374c:	2d00      	cmp	r5, #0
 800374e:	bfa8      	it	ge
 8003750:	6821      	ldrge	r1, [r4, #0]
 8003752:	60a5      	str	r5, [r4, #8]
 8003754:	bfa4      	itt	ge
 8003756:	f021 0104 	bicge.w	r1, r1, #4
 800375a:	6021      	strge	r1, [r4, #0]
 800375c:	b90e      	cbnz	r6, 8003762 <_printf_i+0x11a>
 800375e:	2d00      	cmp	r5, #0
 8003760:	d04d      	beq.n	80037fe <_printf_i+0x1b6>
 8003762:	4615      	mov	r5, r2
 8003764:	fbb6 f1f3 	udiv	r1, r6, r3
 8003768:	fb03 6711 	mls	r7, r3, r1, r6
 800376c:	5dc7      	ldrb	r7, [r0, r7]
 800376e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003772:	4637      	mov	r7, r6
 8003774:	42bb      	cmp	r3, r7
 8003776:	460e      	mov	r6, r1
 8003778:	d9f4      	bls.n	8003764 <_printf_i+0x11c>
 800377a:	2b08      	cmp	r3, #8
 800377c:	d10b      	bne.n	8003796 <_printf_i+0x14e>
 800377e:	6823      	ldr	r3, [r4, #0]
 8003780:	07de      	lsls	r6, r3, #31
 8003782:	d508      	bpl.n	8003796 <_printf_i+0x14e>
 8003784:	6923      	ldr	r3, [r4, #16]
 8003786:	6861      	ldr	r1, [r4, #4]
 8003788:	4299      	cmp	r1, r3
 800378a:	bfde      	ittt	le
 800378c:	2330      	movle	r3, #48	; 0x30
 800378e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003792:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003796:	1b52      	subs	r2, r2, r5
 8003798:	6122      	str	r2, [r4, #16]
 800379a:	464b      	mov	r3, r9
 800379c:	4621      	mov	r1, r4
 800379e:	4640      	mov	r0, r8
 80037a0:	f8cd a000 	str.w	sl, [sp]
 80037a4:	aa03      	add	r2, sp, #12
 80037a6:	f7ff fedf 	bl	8003568 <_printf_common>
 80037aa:	3001      	adds	r0, #1
 80037ac:	d14c      	bne.n	8003848 <_printf_i+0x200>
 80037ae:	f04f 30ff 	mov.w	r0, #4294967295
 80037b2:	b004      	add	sp, #16
 80037b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037b8:	4834      	ldr	r0, [pc, #208]	; (800388c <_printf_i+0x244>)
 80037ba:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80037be:	6829      	ldr	r1, [r5, #0]
 80037c0:	6823      	ldr	r3, [r4, #0]
 80037c2:	f851 6b04 	ldr.w	r6, [r1], #4
 80037c6:	6029      	str	r1, [r5, #0]
 80037c8:	061d      	lsls	r5, r3, #24
 80037ca:	d514      	bpl.n	80037f6 <_printf_i+0x1ae>
 80037cc:	07df      	lsls	r7, r3, #31
 80037ce:	bf44      	itt	mi
 80037d0:	f043 0320 	orrmi.w	r3, r3, #32
 80037d4:	6023      	strmi	r3, [r4, #0]
 80037d6:	b91e      	cbnz	r6, 80037e0 <_printf_i+0x198>
 80037d8:	6823      	ldr	r3, [r4, #0]
 80037da:	f023 0320 	bic.w	r3, r3, #32
 80037de:	6023      	str	r3, [r4, #0]
 80037e0:	2310      	movs	r3, #16
 80037e2:	e7af      	b.n	8003744 <_printf_i+0xfc>
 80037e4:	6823      	ldr	r3, [r4, #0]
 80037e6:	f043 0320 	orr.w	r3, r3, #32
 80037ea:	6023      	str	r3, [r4, #0]
 80037ec:	2378      	movs	r3, #120	; 0x78
 80037ee:	4828      	ldr	r0, [pc, #160]	; (8003890 <_printf_i+0x248>)
 80037f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037f4:	e7e3      	b.n	80037be <_printf_i+0x176>
 80037f6:	0659      	lsls	r1, r3, #25
 80037f8:	bf48      	it	mi
 80037fa:	b2b6      	uxthmi	r6, r6
 80037fc:	e7e6      	b.n	80037cc <_printf_i+0x184>
 80037fe:	4615      	mov	r5, r2
 8003800:	e7bb      	b.n	800377a <_printf_i+0x132>
 8003802:	682b      	ldr	r3, [r5, #0]
 8003804:	6826      	ldr	r6, [r4, #0]
 8003806:	1d18      	adds	r0, r3, #4
 8003808:	6961      	ldr	r1, [r4, #20]
 800380a:	6028      	str	r0, [r5, #0]
 800380c:	0635      	lsls	r5, r6, #24
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	d501      	bpl.n	8003816 <_printf_i+0x1ce>
 8003812:	6019      	str	r1, [r3, #0]
 8003814:	e002      	b.n	800381c <_printf_i+0x1d4>
 8003816:	0670      	lsls	r0, r6, #25
 8003818:	d5fb      	bpl.n	8003812 <_printf_i+0x1ca>
 800381a:	8019      	strh	r1, [r3, #0]
 800381c:	2300      	movs	r3, #0
 800381e:	4615      	mov	r5, r2
 8003820:	6123      	str	r3, [r4, #16]
 8003822:	e7ba      	b.n	800379a <_printf_i+0x152>
 8003824:	682b      	ldr	r3, [r5, #0]
 8003826:	2100      	movs	r1, #0
 8003828:	1d1a      	adds	r2, r3, #4
 800382a:	602a      	str	r2, [r5, #0]
 800382c:	681d      	ldr	r5, [r3, #0]
 800382e:	6862      	ldr	r2, [r4, #4]
 8003830:	4628      	mov	r0, r5
 8003832:	f000 f82f 	bl	8003894 <memchr>
 8003836:	b108      	cbz	r0, 800383c <_printf_i+0x1f4>
 8003838:	1b40      	subs	r0, r0, r5
 800383a:	6060      	str	r0, [r4, #4]
 800383c:	6863      	ldr	r3, [r4, #4]
 800383e:	6123      	str	r3, [r4, #16]
 8003840:	2300      	movs	r3, #0
 8003842:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003846:	e7a8      	b.n	800379a <_printf_i+0x152>
 8003848:	462a      	mov	r2, r5
 800384a:	4649      	mov	r1, r9
 800384c:	4640      	mov	r0, r8
 800384e:	6923      	ldr	r3, [r4, #16]
 8003850:	47d0      	blx	sl
 8003852:	3001      	adds	r0, #1
 8003854:	d0ab      	beq.n	80037ae <_printf_i+0x166>
 8003856:	6823      	ldr	r3, [r4, #0]
 8003858:	079b      	lsls	r3, r3, #30
 800385a:	d413      	bmi.n	8003884 <_printf_i+0x23c>
 800385c:	68e0      	ldr	r0, [r4, #12]
 800385e:	9b03      	ldr	r3, [sp, #12]
 8003860:	4298      	cmp	r0, r3
 8003862:	bfb8      	it	lt
 8003864:	4618      	movlt	r0, r3
 8003866:	e7a4      	b.n	80037b2 <_printf_i+0x16a>
 8003868:	2301      	movs	r3, #1
 800386a:	4632      	mov	r2, r6
 800386c:	4649      	mov	r1, r9
 800386e:	4640      	mov	r0, r8
 8003870:	47d0      	blx	sl
 8003872:	3001      	adds	r0, #1
 8003874:	d09b      	beq.n	80037ae <_printf_i+0x166>
 8003876:	3501      	adds	r5, #1
 8003878:	68e3      	ldr	r3, [r4, #12]
 800387a:	9903      	ldr	r1, [sp, #12]
 800387c:	1a5b      	subs	r3, r3, r1
 800387e:	42ab      	cmp	r3, r5
 8003880:	dcf2      	bgt.n	8003868 <_printf_i+0x220>
 8003882:	e7eb      	b.n	800385c <_printf_i+0x214>
 8003884:	2500      	movs	r5, #0
 8003886:	f104 0619 	add.w	r6, r4, #25
 800388a:	e7f5      	b.n	8003878 <_printf_i+0x230>
 800388c:	08003bf5 	.word	0x08003bf5
 8003890:	08003c06 	.word	0x08003c06

08003894 <memchr>:
 8003894:	4603      	mov	r3, r0
 8003896:	b510      	push	{r4, lr}
 8003898:	b2c9      	uxtb	r1, r1
 800389a:	4402      	add	r2, r0
 800389c:	4293      	cmp	r3, r2
 800389e:	4618      	mov	r0, r3
 80038a0:	d101      	bne.n	80038a6 <memchr+0x12>
 80038a2:	2000      	movs	r0, #0
 80038a4:	e003      	b.n	80038ae <memchr+0x1a>
 80038a6:	7804      	ldrb	r4, [r0, #0]
 80038a8:	3301      	adds	r3, #1
 80038aa:	428c      	cmp	r4, r1
 80038ac:	d1f6      	bne.n	800389c <memchr+0x8>
 80038ae:	bd10      	pop	{r4, pc}

080038b0 <memcpy>:
 80038b0:	440a      	add	r2, r1
 80038b2:	4291      	cmp	r1, r2
 80038b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80038b8:	d100      	bne.n	80038bc <memcpy+0xc>
 80038ba:	4770      	bx	lr
 80038bc:	b510      	push	{r4, lr}
 80038be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80038c2:	4291      	cmp	r1, r2
 80038c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80038c8:	d1f9      	bne.n	80038be <memcpy+0xe>
 80038ca:	bd10      	pop	{r4, pc}

080038cc <memmove>:
 80038cc:	4288      	cmp	r0, r1
 80038ce:	b510      	push	{r4, lr}
 80038d0:	eb01 0402 	add.w	r4, r1, r2
 80038d4:	d902      	bls.n	80038dc <memmove+0x10>
 80038d6:	4284      	cmp	r4, r0
 80038d8:	4623      	mov	r3, r4
 80038da:	d807      	bhi.n	80038ec <memmove+0x20>
 80038dc:	1e43      	subs	r3, r0, #1
 80038de:	42a1      	cmp	r1, r4
 80038e0:	d008      	beq.n	80038f4 <memmove+0x28>
 80038e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80038e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80038ea:	e7f8      	b.n	80038de <memmove+0x12>
 80038ec:	4601      	mov	r1, r0
 80038ee:	4402      	add	r2, r0
 80038f0:	428a      	cmp	r2, r1
 80038f2:	d100      	bne.n	80038f6 <memmove+0x2a>
 80038f4:	bd10      	pop	{r4, pc}
 80038f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80038fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80038fe:	e7f7      	b.n	80038f0 <memmove+0x24>

08003900 <_free_r>:
 8003900:	b538      	push	{r3, r4, r5, lr}
 8003902:	4605      	mov	r5, r0
 8003904:	2900      	cmp	r1, #0
 8003906:	d040      	beq.n	800398a <_free_r+0x8a>
 8003908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800390c:	1f0c      	subs	r4, r1, #4
 800390e:	2b00      	cmp	r3, #0
 8003910:	bfb8      	it	lt
 8003912:	18e4      	addlt	r4, r4, r3
 8003914:	f000 f910 	bl	8003b38 <__malloc_lock>
 8003918:	4a1c      	ldr	r2, [pc, #112]	; (800398c <_free_r+0x8c>)
 800391a:	6813      	ldr	r3, [r2, #0]
 800391c:	b933      	cbnz	r3, 800392c <_free_r+0x2c>
 800391e:	6063      	str	r3, [r4, #4]
 8003920:	6014      	str	r4, [r2, #0]
 8003922:	4628      	mov	r0, r5
 8003924:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003928:	f000 b90c 	b.w	8003b44 <__malloc_unlock>
 800392c:	42a3      	cmp	r3, r4
 800392e:	d908      	bls.n	8003942 <_free_r+0x42>
 8003930:	6820      	ldr	r0, [r4, #0]
 8003932:	1821      	adds	r1, r4, r0
 8003934:	428b      	cmp	r3, r1
 8003936:	bf01      	itttt	eq
 8003938:	6819      	ldreq	r1, [r3, #0]
 800393a:	685b      	ldreq	r3, [r3, #4]
 800393c:	1809      	addeq	r1, r1, r0
 800393e:	6021      	streq	r1, [r4, #0]
 8003940:	e7ed      	b.n	800391e <_free_r+0x1e>
 8003942:	461a      	mov	r2, r3
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	b10b      	cbz	r3, 800394c <_free_r+0x4c>
 8003948:	42a3      	cmp	r3, r4
 800394a:	d9fa      	bls.n	8003942 <_free_r+0x42>
 800394c:	6811      	ldr	r1, [r2, #0]
 800394e:	1850      	adds	r0, r2, r1
 8003950:	42a0      	cmp	r0, r4
 8003952:	d10b      	bne.n	800396c <_free_r+0x6c>
 8003954:	6820      	ldr	r0, [r4, #0]
 8003956:	4401      	add	r1, r0
 8003958:	1850      	adds	r0, r2, r1
 800395a:	4283      	cmp	r3, r0
 800395c:	6011      	str	r1, [r2, #0]
 800395e:	d1e0      	bne.n	8003922 <_free_r+0x22>
 8003960:	6818      	ldr	r0, [r3, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	4401      	add	r1, r0
 8003966:	6011      	str	r1, [r2, #0]
 8003968:	6053      	str	r3, [r2, #4]
 800396a:	e7da      	b.n	8003922 <_free_r+0x22>
 800396c:	d902      	bls.n	8003974 <_free_r+0x74>
 800396e:	230c      	movs	r3, #12
 8003970:	602b      	str	r3, [r5, #0]
 8003972:	e7d6      	b.n	8003922 <_free_r+0x22>
 8003974:	6820      	ldr	r0, [r4, #0]
 8003976:	1821      	adds	r1, r4, r0
 8003978:	428b      	cmp	r3, r1
 800397a:	bf01      	itttt	eq
 800397c:	6819      	ldreq	r1, [r3, #0]
 800397e:	685b      	ldreq	r3, [r3, #4]
 8003980:	1809      	addeq	r1, r1, r0
 8003982:	6021      	streq	r1, [r4, #0]
 8003984:	6063      	str	r3, [r4, #4]
 8003986:	6054      	str	r4, [r2, #4]
 8003988:	e7cb      	b.n	8003922 <_free_r+0x22>
 800398a:	bd38      	pop	{r3, r4, r5, pc}
 800398c:	20000114 	.word	0x20000114

08003990 <sbrk_aligned>:
 8003990:	b570      	push	{r4, r5, r6, lr}
 8003992:	4e0e      	ldr	r6, [pc, #56]	; (80039cc <sbrk_aligned+0x3c>)
 8003994:	460c      	mov	r4, r1
 8003996:	6831      	ldr	r1, [r6, #0]
 8003998:	4605      	mov	r5, r0
 800399a:	b911      	cbnz	r1, 80039a2 <sbrk_aligned+0x12>
 800399c:	f000 f8bc 	bl	8003b18 <_sbrk_r>
 80039a0:	6030      	str	r0, [r6, #0]
 80039a2:	4621      	mov	r1, r4
 80039a4:	4628      	mov	r0, r5
 80039a6:	f000 f8b7 	bl	8003b18 <_sbrk_r>
 80039aa:	1c43      	adds	r3, r0, #1
 80039ac:	d00a      	beq.n	80039c4 <sbrk_aligned+0x34>
 80039ae:	1cc4      	adds	r4, r0, #3
 80039b0:	f024 0403 	bic.w	r4, r4, #3
 80039b4:	42a0      	cmp	r0, r4
 80039b6:	d007      	beq.n	80039c8 <sbrk_aligned+0x38>
 80039b8:	1a21      	subs	r1, r4, r0
 80039ba:	4628      	mov	r0, r5
 80039bc:	f000 f8ac 	bl	8003b18 <_sbrk_r>
 80039c0:	3001      	adds	r0, #1
 80039c2:	d101      	bne.n	80039c8 <sbrk_aligned+0x38>
 80039c4:	f04f 34ff 	mov.w	r4, #4294967295
 80039c8:	4620      	mov	r0, r4
 80039ca:	bd70      	pop	{r4, r5, r6, pc}
 80039cc:	20000118 	.word	0x20000118

080039d0 <_malloc_r>:
 80039d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039d4:	1ccd      	adds	r5, r1, #3
 80039d6:	f025 0503 	bic.w	r5, r5, #3
 80039da:	3508      	adds	r5, #8
 80039dc:	2d0c      	cmp	r5, #12
 80039de:	bf38      	it	cc
 80039e0:	250c      	movcc	r5, #12
 80039e2:	2d00      	cmp	r5, #0
 80039e4:	4607      	mov	r7, r0
 80039e6:	db01      	blt.n	80039ec <_malloc_r+0x1c>
 80039e8:	42a9      	cmp	r1, r5
 80039ea:	d905      	bls.n	80039f8 <_malloc_r+0x28>
 80039ec:	230c      	movs	r3, #12
 80039ee:	2600      	movs	r6, #0
 80039f0:	603b      	str	r3, [r7, #0]
 80039f2:	4630      	mov	r0, r6
 80039f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039f8:	4e2e      	ldr	r6, [pc, #184]	; (8003ab4 <_malloc_r+0xe4>)
 80039fa:	f000 f89d 	bl	8003b38 <__malloc_lock>
 80039fe:	6833      	ldr	r3, [r6, #0]
 8003a00:	461c      	mov	r4, r3
 8003a02:	bb34      	cbnz	r4, 8003a52 <_malloc_r+0x82>
 8003a04:	4629      	mov	r1, r5
 8003a06:	4638      	mov	r0, r7
 8003a08:	f7ff ffc2 	bl	8003990 <sbrk_aligned>
 8003a0c:	1c43      	adds	r3, r0, #1
 8003a0e:	4604      	mov	r4, r0
 8003a10:	d14d      	bne.n	8003aae <_malloc_r+0xde>
 8003a12:	6834      	ldr	r4, [r6, #0]
 8003a14:	4626      	mov	r6, r4
 8003a16:	2e00      	cmp	r6, #0
 8003a18:	d140      	bne.n	8003a9c <_malloc_r+0xcc>
 8003a1a:	6823      	ldr	r3, [r4, #0]
 8003a1c:	4631      	mov	r1, r6
 8003a1e:	4638      	mov	r0, r7
 8003a20:	eb04 0803 	add.w	r8, r4, r3
 8003a24:	f000 f878 	bl	8003b18 <_sbrk_r>
 8003a28:	4580      	cmp	r8, r0
 8003a2a:	d13a      	bne.n	8003aa2 <_malloc_r+0xd2>
 8003a2c:	6821      	ldr	r1, [r4, #0]
 8003a2e:	3503      	adds	r5, #3
 8003a30:	1a6d      	subs	r5, r5, r1
 8003a32:	f025 0503 	bic.w	r5, r5, #3
 8003a36:	3508      	adds	r5, #8
 8003a38:	2d0c      	cmp	r5, #12
 8003a3a:	bf38      	it	cc
 8003a3c:	250c      	movcc	r5, #12
 8003a3e:	4638      	mov	r0, r7
 8003a40:	4629      	mov	r1, r5
 8003a42:	f7ff ffa5 	bl	8003990 <sbrk_aligned>
 8003a46:	3001      	adds	r0, #1
 8003a48:	d02b      	beq.n	8003aa2 <_malloc_r+0xd2>
 8003a4a:	6823      	ldr	r3, [r4, #0]
 8003a4c:	442b      	add	r3, r5
 8003a4e:	6023      	str	r3, [r4, #0]
 8003a50:	e00e      	b.n	8003a70 <_malloc_r+0xa0>
 8003a52:	6822      	ldr	r2, [r4, #0]
 8003a54:	1b52      	subs	r2, r2, r5
 8003a56:	d41e      	bmi.n	8003a96 <_malloc_r+0xc6>
 8003a58:	2a0b      	cmp	r2, #11
 8003a5a:	d916      	bls.n	8003a8a <_malloc_r+0xba>
 8003a5c:	1961      	adds	r1, r4, r5
 8003a5e:	42a3      	cmp	r3, r4
 8003a60:	6025      	str	r5, [r4, #0]
 8003a62:	bf18      	it	ne
 8003a64:	6059      	strne	r1, [r3, #4]
 8003a66:	6863      	ldr	r3, [r4, #4]
 8003a68:	bf08      	it	eq
 8003a6a:	6031      	streq	r1, [r6, #0]
 8003a6c:	5162      	str	r2, [r4, r5]
 8003a6e:	604b      	str	r3, [r1, #4]
 8003a70:	4638      	mov	r0, r7
 8003a72:	f104 060b 	add.w	r6, r4, #11
 8003a76:	f000 f865 	bl	8003b44 <__malloc_unlock>
 8003a7a:	f026 0607 	bic.w	r6, r6, #7
 8003a7e:	1d23      	adds	r3, r4, #4
 8003a80:	1af2      	subs	r2, r6, r3
 8003a82:	d0b6      	beq.n	80039f2 <_malloc_r+0x22>
 8003a84:	1b9b      	subs	r3, r3, r6
 8003a86:	50a3      	str	r3, [r4, r2]
 8003a88:	e7b3      	b.n	80039f2 <_malloc_r+0x22>
 8003a8a:	6862      	ldr	r2, [r4, #4]
 8003a8c:	42a3      	cmp	r3, r4
 8003a8e:	bf0c      	ite	eq
 8003a90:	6032      	streq	r2, [r6, #0]
 8003a92:	605a      	strne	r2, [r3, #4]
 8003a94:	e7ec      	b.n	8003a70 <_malloc_r+0xa0>
 8003a96:	4623      	mov	r3, r4
 8003a98:	6864      	ldr	r4, [r4, #4]
 8003a9a:	e7b2      	b.n	8003a02 <_malloc_r+0x32>
 8003a9c:	4634      	mov	r4, r6
 8003a9e:	6876      	ldr	r6, [r6, #4]
 8003aa0:	e7b9      	b.n	8003a16 <_malloc_r+0x46>
 8003aa2:	230c      	movs	r3, #12
 8003aa4:	4638      	mov	r0, r7
 8003aa6:	603b      	str	r3, [r7, #0]
 8003aa8:	f000 f84c 	bl	8003b44 <__malloc_unlock>
 8003aac:	e7a1      	b.n	80039f2 <_malloc_r+0x22>
 8003aae:	6025      	str	r5, [r4, #0]
 8003ab0:	e7de      	b.n	8003a70 <_malloc_r+0xa0>
 8003ab2:	bf00      	nop
 8003ab4:	20000114 	.word	0x20000114

08003ab8 <_realloc_r>:
 8003ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003abc:	4680      	mov	r8, r0
 8003abe:	4614      	mov	r4, r2
 8003ac0:	460e      	mov	r6, r1
 8003ac2:	b921      	cbnz	r1, 8003ace <_realloc_r+0x16>
 8003ac4:	4611      	mov	r1, r2
 8003ac6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003aca:	f7ff bf81 	b.w	80039d0 <_malloc_r>
 8003ace:	b92a      	cbnz	r2, 8003adc <_realloc_r+0x24>
 8003ad0:	f7ff ff16 	bl	8003900 <_free_r>
 8003ad4:	4625      	mov	r5, r4
 8003ad6:	4628      	mov	r0, r5
 8003ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003adc:	f000 f838 	bl	8003b50 <_malloc_usable_size_r>
 8003ae0:	4284      	cmp	r4, r0
 8003ae2:	4607      	mov	r7, r0
 8003ae4:	d802      	bhi.n	8003aec <_realloc_r+0x34>
 8003ae6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003aea:	d812      	bhi.n	8003b12 <_realloc_r+0x5a>
 8003aec:	4621      	mov	r1, r4
 8003aee:	4640      	mov	r0, r8
 8003af0:	f7ff ff6e 	bl	80039d0 <_malloc_r>
 8003af4:	4605      	mov	r5, r0
 8003af6:	2800      	cmp	r0, #0
 8003af8:	d0ed      	beq.n	8003ad6 <_realloc_r+0x1e>
 8003afa:	42bc      	cmp	r4, r7
 8003afc:	4622      	mov	r2, r4
 8003afe:	4631      	mov	r1, r6
 8003b00:	bf28      	it	cs
 8003b02:	463a      	movcs	r2, r7
 8003b04:	f7ff fed4 	bl	80038b0 <memcpy>
 8003b08:	4631      	mov	r1, r6
 8003b0a:	4640      	mov	r0, r8
 8003b0c:	f7ff fef8 	bl	8003900 <_free_r>
 8003b10:	e7e1      	b.n	8003ad6 <_realloc_r+0x1e>
 8003b12:	4635      	mov	r5, r6
 8003b14:	e7df      	b.n	8003ad6 <_realloc_r+0x1e>
	...

08003b18 <_sbrk_r>:
 8003b18:	b538      	push	{r3, r4, r5, lr}
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	4d05      	ldr	r5, [pc, #20]	; (8003b34 <_sbrk_r+0x1c>)
 8003b1e:	4604      	mov	r4, r0
 8003b20:	4608      	mov	r0, r1
 8003b22:	602b      	str	r3, [r5, #0]
 8003b24:	f7fd fa18 	bl	8000f58 <_sbrk>
 8003b28:	1c43      	adds	r3, r0, #1
 8003b2a:	d102      	bne.n	8003b32 <_sbrk_r+0x1a>
 8003b2c:	682b      	ldr	r3, [r5, #0]
 8003b2e:	b103      	cbz	r3, 8003b32 <_sbrk_r+0x1a>
 8003b30:	6023      	str	r3, [r4, #0]
 8003b32:	bd38      	pop	{r3, r4, r5, pc}
 8003b34:	2000011c 	.word	0x2000011c

08003b38 <__malloc_lock>:
 8003b38:	4801      	ldr	r0, [pc, #4]	; (8003b40 <__malloc_lock+0x8>)
 8003b3a:	f000 b811 	b.w	8003b60 <__retarget_lock_acquire_recursive>
 8003b3e:	bf00      	nop
 8003b40:	20000120 	.word	0x20000120

08003b44 <__malloc_unlock>:
 8003b44:	4801      	ldr	r0, [pc, #4]	; (8003b4c <__malloc_unlock+0x8>)
 8003b46:	f000 b80c 	b.w	8003b62 <__retarget_lock_release_recursive>
 8003b4a:	bf00      	nop
 8003b4c:	20000120 	.word	0x20000120

08003b50 <_malloc_usable_size_r>:
 8003b50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b54:	1f18      	subs	r0, r3, #4
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	bfbc      	itt	lt
 8003b5a:	580b      	ldrlt	r3, [r1, r0]
 8003b5c:	18c0      	addlt	r0, r0, r3
 8003b5e:	4770      	bx	lr

08003b60 <__retarget_lock_acquire_recursive>:
 8003b60:	4770      	bx	lr

08003b62 <__retarget_lock_release_recursive>:
 8003b62:	4770      	bx	lr

08003b64 <_init>:
 8003b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b66:	bf00      	nop
 8003b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b6a:	bc08      	pop	{r3}
 8003b6c:	469e      	mov	lr, r3
 8003b6e:	4770      	bx	lr

08003b70 <_fini>:
 8003b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b72:	bf00      	nop
 8003b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b76:	bc08      	pop	{r3}
 8003b78:	469e      	mov	lr, r3
 8003b7a:	4770      	bx	lr
